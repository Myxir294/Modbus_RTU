
Modbus_PTC1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045f4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800477c  0800477c  0001477c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047c4  080047c4  00020040  2**0
                  CONTENTS
  4 .ARM          00000008  080047c4  080047c4  000147c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047cc  080047cc  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047cc  080047cc  000147cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047d0  080047d0  000147d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  080047d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009cc  20000040  08004814  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a0c  08004814  00020a0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d0ec  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f2d  00000000  00000000  0002d15c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a20  00000000  00000000  0002f090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000968  00000000  00000000  0002fab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026206  00000000  00000000  00030418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c7d8  00000000  00000000  0005661e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9b3c  00000000  00000000  00062df6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014c932  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002840  00000000  00000000  0014c984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000040 	.word	0x20000040
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004764 	.word	0x08004764

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000044 	.word	0x20000044
 80001c4:	08004764 	.word	0x08004764

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <maszyna_stanu>:
int expected_length;
uint16_t self_crc = 0xFFFF;
char pom_komunikat[] = "Wykryto nieoczekiwany koniec ramki";
//char pom_komunikat2[] = "Niezgodnosc odebranego CRC z wyliczonym";
void maszyna_stanu(char ch, bool koniec_ramki)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b086      	sub	sp, #24
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	460a      	mov	r2, r1
 80004e6:	71fb      	strb	r3, [r7, #7]
 80004e8:	4613      	mov	r3, r2
 80004ea:	71bb      	strb	r3, [r7, #6]
	static SM_STATE stan = S_IDLE;
	static char payload[252];
	static int payload_counter = 0;
	static char self_address = 0x11;
	static char pom_crc1;
	if(koniec_ramki && stan != S_WAIT_EOF && stan != S_CRC_CHECK2)
 80004ec:	79bb      	ldrb	r3, [r7, #6]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d021      	beq.n	8000536 <maszyna_stanu+0x5a>
 80004f2:	4b9e      	ldr	r3, [pc, #632]	; (800076c <maszyna_stanu+0x290>)
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	2b05      	cmp	r3, #5
 80004f8:	d01d      	beq.n	8000536 <maszyna_stanu+0x5a>
 80004fa:	4b9c      	ldr	r3, [pc, #624]	; (800076c <maszyna_stanu+0x290>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	2b08      	cmp	r3, #8
 8000500:	d019      	beq.n	8000536 <maszyna_stanu+0x5a>
	{
		stan = S_WAIT_EOF;
 8000502:	4b9a      	ldr	r3, [pc, #616]	; (800076c <maszyna_stanu+0x290>)
 8000504:	2205      	movs	r2, #5
 8000506:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)pom_komunikat, strlen(pom_komunikat), HAL_MAX_DELAY);
 8000508:	4899      	ldr	r0, [pc, #612]	; (8000770 <maszyna_stanu+0x294>)
 800050a:	f7ff fe5d 	bl	80001c8 <strlen>
 800050e:	4603      	mov	r3, r0
 8000510:	b29a      	uxth	r2, r3
 8000512:	f04f 33ff 	mov.w	r3, #4294967295
 8000516:	4996      	ldr	r1, [pc, #600]	; (8000770 <maszyna_stanu+0x294>)
 8000518:	4896      	ldr	r0, [pc, #600]	; (8000774 <maszyna_stanu+0x298>)
 800051a:	f002 fcab 	bl	8002e74 <HAL_UART_Transmit>
		payload_counter = 0;
 800051e:	4b96      	ldr	r3, [pc, #600]	; (8000778 <maszyna_stanu+0x29c>)
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
		memset(payload, 0, 255 * sizeof(int));
 8000524:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8000528:	2100      	movs	r1, #0
 800052a:	4894      	ldr	r0, [pc, #592]	; (800077c <maszyna_stanu+0x2a0>)
 800052c:	f004 f912 	bl	8004754 <memset>
		function_to_execute = 0x00;
 8000530:	4b93      	ldr	r3, [pc, #588]	; (8000780 <maszyna_stanu+0x2a4>)
 8000532:	2200      	movs	r2, #0
 8000534:	701a      	strb	r2, [r3, #0]
	}
	switch(stan)
 8000536:	4b8d      	ldr	r3, [pc, #564]	; (800076c <maszyna_stanu+0x290>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	2b08      	cmp	r3, #8
 800053c:	f200 81b5 	bhi.w	80008aa <maszyna_stanu+0x3ce>
 8000540:	a201      	add	r2, pc, #4	; (adr r2, 8000548 <maszyna_stanu+0x6c>)
 8000542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000546:	bf00      	nop
 8000548:	0800056d 	.word	0x0800056d
 800054c:	080005a9 	.word	0x080005a9
 8000550:	08000651 	.word	0x08000651
 8000554:	080008ab 	.word	0x080008ab
 8000558:	080008ab 	.word	0x080008ab
 800055c:	08000599 	.word	0x08000599
 8000560:	080005ef 	.word	0x080005ef
 8000564:	08000687 	.word	0x08000687
 8000568:	08000695 	.word	0x08000695
	{
		case S_IDLE:
			if(ch == self_address)
 800056c:	4b85      	ldr	r3, [pc, #532]	; (8000784 <maszyna_stanu+0x2a8>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	79fa      	ldrb	r2, [r7, #7]
 8000572:	429a      	cmp	r2, r3
 8000574:	d10c      	bne.n	8000590 <maszyna_stanu+0xb4>
			{
				self_crc = 0xFFFF;
 8000576:	4b84      	ldr	r3, [pc, #528]	; (8000788 <maszyna_stanu+0x2ac>)
 8000578:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800057c:	801a      	strh	r2, [r3, #0]
				stan = S_ADDRESS;
 800057e:	4b7b      	ldr	r3, [pc, #492]	; (800076c <maszyna_stanu+0x290>)
 8000580:	2201      	movs	r2, #1
 8000582:	701a      	strb	r2, [r3, #0]
				crc16_update(&self_crc, ch);
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	4619      	mov	r1, r3
 8000588:	487f      	ldr	r0, [pc, #508]	; (8000788 <maszyna_stanu+0x2ac>)
 800058a:	f000 fc09 	bl	8000da0 <crc16_update>
			}
			else
			{
				stan = S_WAIT_EOF;
			}
			break;
 800058e:	e18c      	b.n	80008aa <maszyna_stanu+0x3ce>
				stan = S_WAIT_EOF;
 8000590:	4b76      	ldr	r3, [pc, #472]	; (800076c <maszyna_stanu+0x290>)
 8000592:	2205      	movs	r2, #5
 8000594:	701a      	strb	r2, [r3, #0]
			break;
 8000596:	e188      	b.n	80008aa <maszyna_stanu+0x3ce>

		case S_WAIT_EOF:
			if(koniec_ramki)
 8000598:	79bb      	ldrb	r3, [r7, #6]
 800059a:	2b00      	cmp	r3, #0
 800059c:	f000 8182 	beq.w	80008a4 <maszyna_stanu+0x3c8>
			{
				stan = S_IDLE;
 80005a0:	4b72      	ldr	r3, [pc, #456]	; (800076c <maszyna_stanu+0x290>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	701a      	strb	r2, [r3, #0]
			}
			break;
 80005a6:	e17d      	b.n	80008a4 <maszyna_stanu+0x3c8>
		case S_ADDRESS:
			if(ch == 0x02)
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	2b02      	cmp	r3, #2
 80005ac:	d109      	bne.n	80005c2 <maszyna_stanu+0xe6>
			{
				function_to_execute = 0x02;
 80005ae:	4b74      	ldr	r3, [pc, #464]	; (8000780 <maszyna_stanu+0x2a4>)
 80005b0:	2202      	movs	r2, #2
 80005b2:	701a      	strb	r2, [r3, #0]
				expected_length = 4;
 80005b4:	4b75      	ldr	r3, [pc, #468]	; (800078c <maszyna_stanu+0x2b0>)
 80005b6:	2204      	movs	r2, #4
 80005b8:	601a      	str	r2, [r3, #0]
				stan = S_FUNCTION_DATA;
 80005ba:	4b6c      	ldr	r3, [pc, #432]	; (800076c <maszyna_stanu+0x290>)
 80005bc:	2202      	movs	r2, #2
 80005be:	701a      	strb	r2, [r3, #0]
 80005c0:	e00f      	b.n	80005e2 <maszyna_stanu+0x106>
			}
			else if(ch == 0x05)
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	2b05      	cmp	r3, #5
 80005c6:	d109      	bne.n	80005dc <maszyna_stanu+0x100>
			{
				function_to_execute = 0x05;
 80005c8:	4b6d      	ldr	r3, [pc, #436]	; (8000780 <maszyna_stanu+0x2a4>)
 80005ca:	2205      	movs	r2, #5
 80005cc:	701a      	strb	r2, [r3, #0]
				expected_length = 6;
 80005ce:	4b6f      	ldr	r3, [pc, #444]	; (800078c <maszyna_stanu+0x2b0>)
 80005d0:	2206      	movs	r2, #6
 80005d2:	601a      	str	r2, [r3, #0]
				stan = S_FUNCTION_DATA;
 80005d4:	4b65      	ldr	r3, [pc, #404]	; (800076c <maszyna_stanu+0x290>)
 80005d6:	2202      	movs	r2, #2
 80005d8:	701a      	strb	r2, [r3, #0]
 80005da:	e002      	b.n	80005e2 <maszyna_stanu+0x106>
			}
			else
			{
				stan = S_UNKNOWN_FUNCTION;
 80005dc:	4b63      	ldr	r3, [pc, #396]	; (800076c <maszyna_stanu+0x290>)
 80005de:	2206      	movs	r2, #6
 80005e0:	701a      	strb	r2, [r3, #0]
			}
			crc16_update(&self_crc, ch);
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	4619      	mov	r1, r3
 80005e6:	4868      	ldr	r0, [pc, #416]	; (8000788 <maszyna_stanu+0x2ac>)
 80005e8:	f000 fbda 	bl	8000da0 <crc16_update>
			break;
 80005ec:	e15d      	b.n	80008aa <maszyna_stanu+0x3ce>

		case S_UNKNOWN_FUNCTION:
			self_crc = 0xFFFF;
 80005ee:	4b66      	ldr	r3, [pc, #408]	; (8000788 <maszyna_stanu+0x2ac>)
 80005f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005f4:	801a      	strh	r2, [r3, #0]
			put_tx(self_address);
 80005f6:	4b63      	ldr	r3, [pc, #396]	; (8000784 <maszyna_stanu+0x2a8>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 fb58 	bl	8000cb0 <put_tx>
			crc16_update(&self_crc, self_address);
 8000600:	4b60      	ldr	r3, [pc, #384]	; (8000784 <maszyna_stanu+0x2a8>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	4619      	mov	r1, r3
 8000606:	4860      	ldr	r0, [pc, #384]	; (8000788 <maszyna_stanu+0x2ac>)
 8000608:	f000 fbca 	bl	8000da0 <crc16_update>

			put_tx(0x82);
 800060c:	2082      	movs	r0, #130	; 0x82
 800060e:	f000 fb4f 	bl	8000cb0 <put_tx>
			crc16_update(&self_crc, 0x82);
 8000612:	2182      	movs	r1, #130	; 0x82
 8000614:	485c      	ldr	r0, [pc, #368]	; (8000788 <maszyna_stanu+0x2ac>)
 8000616:	f000 fbc3 	bl	8000da0 <crc16_update>

			put_tx(0x01);
 800061a:	2001      	movs	r0, #1
 800061c:	f000 fb48 	bl	8000cb0 <put_tx>
			crc16_update(&self_crc, 0x01);
 8000620:	2101      	movs	r1, #1
 8000622:	4859      	ldr	r0, [pc, #356]	; (8000788 <maszyna_stanu+0x2ac>)
 8000624:	f000 fbbc 	bl	8000da0 <crc16_update>

			uint8_t crc2  = (uint8_t) (self_crc & 0x00FF);
 8000628:	4b57      	ldr	r3, [pc, #348]	; (8000788 <maszyna_stanu+0x2ac>)
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	727b      	strb	r3, [r7, #9]
			uint8_t crc1  = (uint8_t) (self_crc >> 8 & 0x00FF);
 800062e:	4b56      	ldr	r3, [pc, #344]	; (8000788 <maszyna_stanu+0x2ac>)
 8000630:	881b      	ldrh	r3, [r3, #0]
 8000632:	0a1b      	lsrs	r3, r3, #8
 8000634:	b29b      	uxth	r3, r3
 8000636:	723b      	strb	r3, [r7, #8]

			put_tx(crc1);
 8000638:	7a3b      	ldrb	r3, [r7, #8]
 800063a:	4618      	mov	r0, r3
 800063c:	f000 fb38 	bl	8000cb0 <put_tx>
			put_tx(crc2);
 8000640:	7a7b      	ldrb	r3, [r7, #9]
 8000642:	4618      	mov	r0, r3
 8000644:	f000 fb34 	bl	8000cb0 <put_tx>
			stan = S_WAIT_EOF;
 8000648:	4b48      	ldr	r3, [pc, #288]	; (800076c <maszyna_stanu+0x290>)
 800064a:	2205      	movs	r2, #5
 800064c:	701a      	strb	r2, [r3, #0]
			break;
 800064e:	e12c      	b.n	80008aa <maszyna_stanu+0x3ce>

		case S_FUNCTION_DATA:
			payload[payload_counter++] = ch;
 8000650:	4b49      	ldr	r3, [pc, #292]	; (8000778 <maszyna_stanu+0x29c>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	1c5a      	adds	r2, r3, #1
 8000656:	4948      	ldr	r1, [pc, #288]	; (8000778 <maszyna_stanu+0x29c>)
 8000658:	600a      	str	r2, [r1, #0]
 800065a:	4948      	ldr	r1, [pc, #288]	; (800077c <maszyna_stanu+0x2a0>)
 800065c:	79fa      	ldrb	r2, [r7, #7]
 800065e:	54ca      	strb	r2, [r1, r3]
			crc16_update(&self_crc, ch);
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	4619      	mov	r1, r3
 8000664:	4848      	ldr	r0, [pc, #288]	; (8000788 <maszyna_stanu+0x2ac>)
 8000666:	f000 fb9b 	bl	8000da0 <crc16_update>
			if(payload_counter == expected_length)
 800066a:	4b43      	ldr	r3, [pc, #268]	; (8000778 <maszyna_stanu+0x29c>)
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	4b47      	ldr	r3, [pc, #284]	; (800078c <maszyna_stanu+0x2b0>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	429a      	cmp	r2, r3
 8000674:	f040 8118 	bne.w	80008a8 <maszyna_stanu+0x3cc>
			{
				stan = S_CRC_CHECK1;
 8000678:	4b3c      	ldr	r3, [pc, #240]	; (800076c <maszyna_stanu+0x290>)
 800067a:	2207      	movs	r2, #7
 800067c:	701a      	strb	r2, [r3, #0]
				payload_counter = 0;
 800067e:	4b3e      	ldr	r3, [pc, #248]	; (8000778 <maszyna_stanu+0x29c>)
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
			}
			break;
 8000684:	e110      	b.n	80008a8 <maszyna_stanu+0x3cc>
		case S_CRC_CHECK1:
			pom_crc1 = ch;
 8000686:	4a42      	ldr	r2, [pc, #264]	; (8000790 <maszyna_stanu+0x2b4>)
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	7013      	strb	r3, [r2, #0]
			stan = S_CRC_CHECK2;
 800068c:	4b37      	ldr	r3, [pc, #220]	; (800076c <maszyna_stanu+0x290>)
 800068e:	2208      	movs	r2, #8
 8000690:	701a      	strb	r2, [r3, #0]
			break;
 8000692:	e10a      	b.n	80008aa <maszyna_stanu+0x3ce>
		case S_CRC_CHECK2:
			if (self_crc != ((pom_crc1 << 8) | (ch & 0xFF)))
 8000694:	4b3c      	ldr	r3, [pc, #240]	; (8000788 <maszyna_stanu+0x2ac>)
 8000696:	881b      	ldrh	r3, [r3, #0]
 8000698:	4619      	mov	r1, r3
 800069a:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <maszyna_stanu+0x2b4>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	021a      	lsls	r2, r3, #8
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	4313      	orrs	r3, r2
 80006a4:	4299      	cmp	r1, r3
 80006a6:	d003      	beq.n	80006b0 <maszyna_stanu+0x1d4>
			{
				stan = S_FUNCTION_FAIL;
 80006a8:	4b30      	ldr	r3, [pc, #192]	; (800076c <maszyna_stanu+0x290>)
 80006aa:	2204      	movs	r2, #4
 80006ac:	701a      	strb	r2, [r3, #0]
 80006ae:	e0c0      	b.n	8000832 <maszyna_stanu+0x356>
			}
			else
			{
				if(function_to_execute == 0x02)
 80006b0:	4b33      	ldr	r3, [pc, #204]	; (8000780 <maszyna_stanu+0x2a4>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b02      	cmp	r3, #2
 80006b6:	d151      	bne.n	800075c <maszyna_stanu+0x280>
				{
					for(int i = 0; i < expected_length; i++)
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
 80006bc:	e00f      	b.n	80006de <maszyna_stanu+0x202>
					{
						if(payload[i] != test_read_payload[i])
 80006be:	4a2f      	ldr	r2, [pc, #188]	; (800077c <maszyna_stanu+0x2a0>)
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	4413      	add	r3, r2
 80006c4:	781a      	ldrb	r2, [r3, #0]
 80006c6:	4933      	ldr	r1, [pc, #204]	; (8000794 <maszyna_stanu+0x2b8>)
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	440b      	add	r3, r1
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	d002      	beq.n	80006d8 <maszyna_stanu+0x1fc>
						{
							stan = S_FUNCTION_FAIL;
 80006d2:	4b26      	ldr	r3, [pc, #152]	; (800076c <maszyna_stanu+0x290>)
 80006d4:	2204      	movs	r2, #4
 80006d6:	701a      	strb	r2, [r3, #0]
					for(int i = 0; i < expected_length; i++)
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	3301      	adds	r3, #1
 80006dc:	617b      	str	r3, [r7, #20]
 80006de:	4b2b      	ldr	r3, [pc, #172]	; (800078c <maszyna_stanu+0x2b0>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	697a      	ldr	r2, [r7, #20]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	dbea      	blt.n	80006be <maszyna_stanu+0x1e2>
						}
					}
					if(stan != S_FUNCTION_FAIL)
 80006e8:	4b20      	ldr	r3, [pc, #128]	; (800076c <maszyna_stanu+0x290>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b04      	cmp	r3, #4
 80006ee:	f000 80a0 	beq.w	8000832 <maszyna_stanu+0x356>
					{
						self_crc = 0xFFFF;
 80006f2:	4b25      	ldr	r3, [pc, #148]	; (8000788 <maszyna_stanu+0x2ac>)
 80006f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006f8:	801a      	strh	r2, [r3, #0]
						put_tx(self_address);
 80006fa:	4b22      	ldr	r3, [pc, #136]	; (8000784 <maszyna_stanu+0x2a8>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 fad6 	bl	8000cb0 <put_tx>
						crc16_update(&self_crc, self_address);
 8000704:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <maszyna_stanu+0x2a8>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	4619      	mov	r1, r3
 800070a:	481f      	ldr	r0, [pc, #124]	; (8000788 <maszyna_stanu+0x2ac>)
 800070c:	f000 fb48 	bl	8000da0 <crc16_update>

						put_tx(0x02);
 8000710:	2002      	movs	r0, #2
 8000712:	f000 facd 	bl	8000cb0 <put_tx>
						crc16_update(&self_crc, 0x82);
 8000716:	2182      	movs	r1, #130	; 0x82
 8000718:	481b      	ldr	r0, [pc, #108]	; (8000788 <maszyna_stanu+0x2ac>)
 800071a:	f000 fb41 	bl	8000da0 <crc16_update>

						put_tx(0xAA);
 800071e:	20aa      	movs	r0, #170	; 0xaa
 8000720:	f000 fac6 	bl	8000cb0 <put_tx>
						crc16_update(&self_crc, 0xAA);
 8000724:	21aa      	movs	r1, #170	; 0xaa
 8000726:	4818      	ldr	r0, [pc, #96]	; (8000788 <maszyna_stanu+0x2ac>)
 8000728:	f000 fb3a 	bl	8000da0 <crc16_update>

						put_tx(0xAA);
 800072c:	20aa      	movs	r0, #170	; 0xaa
 800072e:	f000 fabf 	bl	8000cb0 <put_tx>
						crc16_update(&self_crc, 0xAA);
 8000732:	21aa      	movs	r1, #170	; 0xaa
 8000734:	4814      	ldr	r0, [pc, #80]	; (8000788 <maszyna_stanu+0x2ac>)
 8000736:	f000 fb33 	bl	8000da0 <crc16_update>

						uint8_t crc2  = (uint8_t) (self_crc & 0x00FF);
 800073a:	4b13      	ldr	r3, [pc, #76]	; (8000788 <maszyna_stanu+0x2ac>)
 800073c:	881b      	ldrh	r3, [r3, #0]
 800073e:	737b      	strb	r3, [r7, #13]
						uint8_t crc1  = (uint8_t) (self_crc >> 8 & 0x00FF);
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <maszyna_stanu+0x2ac>)
 8000742:	881b      	ldrh	r3, [r3, #0]
 8000744:	0a1b      	lsrs	r3, r3, #8
 8000746:	b29b      	uxth	r3, r3
 8000748:	733b      	strb	r3, [r7, #12]

						put_tx(crc1);
 800074a:	7b3b      	ldrb	r3, [r7, #12]
 800074c:	4618      	mov	r0, r3
 800074e:	f000 faaf 	bl	8000cb0 <put_tx>
						put_tx(crc2);
 8000752:	7b7b      	ldrb	r3, [r7, #13]
 8000754:	4618      	mov	r0, r3
 8000756:	f000 faab 	bl	8000cb0 <put_tx>
 800075a:	e06a      	b.n	8000832 <maszyna_stanu+0x356>
						//stan = S_FUNCTION_OK;
					}
					//stan = S_IDLE;
				}
				else if(function_to_execute == 0x05)
 800075c:	4b08      	ldr	r3, [pc, #32]	; (8000780 <maszyna_stanu+0x2a4>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b05      	cmp	r3, #5
 8000762:	d166      	bne.n	8000832 <maszyna_stanu+0x356>
				{
					for(int i = 0; i < expected_length; i++)
 8000764:	2300      	movs	r3, #0
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	e026      	b.n	80007b8 <maszyna_stanu+0x2dc>
 800076a:	bf00      	nop
 800076c:	200000e8 	.word	0x200000e8
 8000770:	2000000c 	.word	0x2000000c
 8000774:	2000005c 	.word	0x2000005c
 8000778:	200000ec 	.word	0x200000ec
 800077c:	200000f0 	.word	0x200000f0
 8000780:	200000e0 	.word	0x200000e0
 8000784:	2000002f 	.word	0x2000002f
 8000788:	2000000a 	.word	0x2000000a
 800078c:	200000e4 	.word	0x200000e4
 8000790:	200001ec 	.word	0x200001ec
 8000794:	20000000 	.word	0x20000000
					{
						if(payload[i] != test_write_payload[i])
 8000798:	4a46      	ldr	r2, [pc, #280]	; (80008b4 <maszyna_stanu+0x3d8>)
 800079a:	693b      	ldr	r3, [r7, #16]
 800079c:	4413      	add	r3, r2
 800079e:	781a      	ldrb	r2, [r3, #0]
 80007a0:	4945      	ldr	r1, [pc, #276]	; (80008b8 <maszyna_stanu+0x3dc>)
 80007a2:	693b      	ldr	r3, [r7, #16]
 80007a4:	440b      	add	r3, r1
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d002      	beq.n	80007b2 <maszyna_stanu+0x2d6>
						{
							stan = S_FUNCTION_FAIL;
 80007ac:	4b43      	ldr	r3, [pc, #268]	; (80008bc <maszyna_stanu+0x3e0>)
 80007ae:	2204      	movs	r2, #4
 80007b0:	701a      	strb	r2, [r3, #0]
					for(int i = 0; i < expected_length; i++)
 80007b2:	693b      	ldr	r3, [r7, #16]
 80007b4:	3301      	adds	r3, #1
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	4b41      	ldr	r3, [pc, #260]	; (80008c0 <maszyna_stanu+0x3e4>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	693a      	ldr	r2, [r7, #16]
 80007be:	429a      	cmp	r2, r3
 80007c0:	dbea      	blt.n	8000798 <maszyna_stanu+0x2bc>
						}
					}
					if(stan != S_FUNCTION_FAIL)
 80007c2:	4b3e      	ldr	r3, [pc, #248]	; (80008bc <maszyna_stanu+0x3e0>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b04      	cmp	r3, #4
 80007c8:	d033      	beq.n	8000832 <maszyna_stanu+0x356>
					{
						self_crc = 0xFFFF;
 80007ca:	4b3e      	ldr	r3, [pc, #248]	; (80008c4 <maszyna_stanu+0x3e8>)
 80007cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007d0:	801a      	strh	r2, [r3, #0]
						put_tx(self_address);
 80007d2:	4b3d      	ldr	r3, [pc, #244]	; (80008c8 <maszyna_stanu+0x3ec>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f000 fa6a 	bl	8000cb0 <put_tx>
						crc16_update(&self_crc, self_address);
 80007dc:	4b3a      	ldr	r3, [pc, #232]	; (80008c8 <maszyna_stanu+0x3ec>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	4619      	mov	r1, r3
 80007e2:	4838      	ldr	r0, [pc, #224]	; (80008c4 <maszyna_stanu+0x3e8>)
 80007e4:	f000 fadc 	bl	8000da0 <crc16_update>

						put_tx(0x02);
 80007e8:	2002      	movs	r0, #2
 80007ea:	f000 fa61 	bl	8000cb0 <put_tx>
						crc16_update(&self_crc, 0x82);
 80007ee:	2182      	movs	r1, #130	; 0x82
 80007f0:	4834      	ldr	r0, [pc, #208]	; (80008c4 <maszyna_stanu+0x3e8>)
 80007f2:	f000 fad5 	bl	8000da0 <crc16_update>

						put_tx(0xBB);
 80007f6:	20bb      	movs	r0, #187	; 0xbb
 80007f8:	f000 fa5a 	bl	8000cb0 <put_tx>
						crc16_update(&self_crc, 0xAA);
 80007fc:	21aa      	movs	r1, #170	; 0xaa
 80007fe:	4831      	ldr	r0, [pc, #196]	; (80008c4 <maszyna_stanu+0x3e8>)
 8000800:	f000 face 	bl	8000da0 <crc16_update>

						put_tx(0xBB);
 8000804:	20bb      	movs	r0, #187	; 0xbb
 8000806:	f000 fa53 	bl	8000cb0 <put_tx>
						crc16_update(&self_crc, 0xAA);
 800080a:	21aa      	movs	r1, #170	; 0xaa
 800080c:	482d      	ldr	r0, [pc, #180]	; (80008c4 <maszyna_stanu+0x3e8>)
 800080e:	f000 fac7 	bl	8000da0 <crc16_update>

						uint8_t crc2  = (uint8_t) (self_crc & 0x00FF);
 8000812:	4b2c      	ldr	r3, [pc, #176]	; (80008c4 <maszyna_stanu+0x3e8>)
 8000814:	881b      	ldrh	r3, [r3, #0]
 8000816:	73fb      	strb	r3, [r7, #15]
						uint8_t crc1  = (uint8_t) (self_crc >> 8 & 0x00FF);
 8000818:	4b2a      	ldr	r3, [pc, #168]	; (80008c4 <maszyna_stanu+0x3e8>)
 800081a:	881b      	ldrh	r3, [r3, #0]
 800081c:	0a1b      	lsrs	r3, r3, #8
 800081e:	b29b      	uxth	r3, r3
 8000820:	73bb      	strb	r3, [r7, #14]

						put_tx(crc1);
 8000822:	7bbb      	ldrb	r3, [r7, #14]
 8000824:	4618      	mov	r0, r3
 8000826:	f000 fa43 	bl	8000cb0 <put_tx>
						put_tx(crc2);
 800082a:	7bfb      	ldrb	r3, [r7, #15]
 800082c:	4618      	mov	r0, r3
 800082e:	f000 fa3f 	bl	8000cb0 <put_tx>
						//stan = S_FUNCTION_OK;
					}
					//stan = S_IDLE;
				}
			}
			if(stan == S_FUNCTION_FAIL)
 8000832:	4b22      	ldr	r3, [pc, #136]	; (80008bc <maszyna_stanu+0x3e0>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b04      	cmp	r3, #4
 8000838:	d130      	bne.n	800089c <maszyna_stanu+0x3c0>
			{
				self_crc = 0xFFFF;
 800083a:	4b22      	ldr	r3, [pc, #136]	; (80008c4 <maszyna_stanu+0x3e8>)
 800083c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000840:	801a      	strh	r2, [r3, #0]
				put_tx(self_address);
 8000842:	4b21      	ldr	r3, [pc, #132]	; (80008c8 <maszyna_stanu+0x3ec>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	4618      	mov	r0, r3
 8000848:	f000 fa32 	bl	8000cb0 <put_tx>
				crc16_update(&self_crc, self_address);
 800084c:	4b1e      	ldr	r3, [pc, #120]	; (80008c8 <maszyna_stanu+0x3ec>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	4619      	mov	r1, r3
 8000852:	481c      	ldr	r0, [pc, #112]	; (80008c4 <maszyna_stanu+0x3e8>)
 8000854:	f000 faa4 	bl	8000da0 <crc16_update>

				put_tx(0x82);
 8000858:	2082      	movs	r0, #130	; 0x82
 800085a:	f000 fa29 	bl	8000cb0 <put_tx>
				crc16_update(&self_crc, 0x82);
 800085e:	2182      	movs	r1, #130	; 0x82
 8000860:	4818      	ldr	r0, [pc, #96]	; (80008c4 <maszyna_stanu+0x3e8>)
 8000862:	f000 fa9d 	bl	8000da0 <crc16_update>

				put_tx(function_to_execute);
 8000866:	4b19      	ldr	r3, [pc, #100]	; (80008cc <maszyna_stanu+0x3f0>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	4618      	mov	r0, r3
 800086c:	f000 fa20 	bl	8000cb0 <put_tx>
				crc16_update(&self_crc, function_to_execute);
 8000870:	4b16      	ldr	r3, [pc, #88]	; (80008cc <maszyna_stanu+0x3f0>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	4619      	mov	r1, r3
 8000876:	4813      	ldr	r0, [pc, #76]	; (80008c4 <maszyna_stanu+0x3e8>)
 8000878:	f000 fa92 	bl	8000da0 <crc16_update>

				uint8_t crc2  = (uint8_t) (self_crc & 0x00FF);
 800087c:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <maszyna_stanu+0x3e8>)
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	72fb      	strb	r3, [r7, #11]
				uint8_t crc1  = (uint8_t) (self_crc >> 8 & 0x00FF);
 8000882:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <maszyna_stanu+0x3e8>)
 8000884:	881b      	ldrh	r3, [r3, #0]
 8000886:	0a1b      	lsrs	r3, r3, #8
 8000888:	b29b      	uxth	r3, r3
 800088a:	72bb      	strb	r3, [r7, #10]

				put_tx(crc1);
 800088c:	7abb      	ldrb	r3, [r7, #10]
 800088e:	4618      	mov	r0, r3
 8000890:	f000 fa0e 	bl	8000cb0 <put_tx>
				put_tx(crc2);
 8000894:	7afb      	ldrb	r3, [r7, #11]
 8000896:	4618      	mov	r0, r3
 8000898:	f000 fa0a 	bl	8000cb0 <put_tx>
			}
			stan = S_IDLE;
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <maszyna_stanu+0x3e0>)
 800089e:	2200      	movs	r2, #0
 80008a0:	701a      	strb	r2, [r3, #0]
			break;
 80008a2:	e002      	b.n	80008aa <maszyna_stanu+0x3ce>
			break;
 80008a4:	bf00      	nop
 80008a6:	e000      	b.n	80008aa <maszyna_stanu+0x3ce>
			break;
 80008a8:	bf00      	nop
	}
}
 80008aa:	bf00      	nop
 80008ac:	3718      	adds	r7, #24
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	200000f0 	.word	0x200000f0
 80008b8:	20000004 	.word	0x20000004
 80008bc:	200000e8 	.word	0x200000e8
 80008c0:	200000e4 	.word	0x200000e4
 80008c4:	2000000a 	.word	0x2000000a
 80008c8:	2000002f 	.word	0x2000002f
 80008cc:	200000e0 	.word	0x200000e0

080008d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d6:	f000 fb90 	bl	8000ffa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008da:	f000 f83b 	bl	8000954 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008de:	f000 f8af 	bl	8000a40 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008e2:	f000 f87d 	bl	80009e0 <MX_USART2_UART_Init>
//  	ramka.length = 0;
//  	ramka.expected_length = 0;
//	uint8_t Data[10];
//	Data[0] = '1';
//	Data[1] = '\n';
	serial_init(&huart2);
 80008e6:	481a      	ldr	r0, [pc, #104]	; (8000950 <main+0x80>)
 80008e8:	f000 f8ee 	bl	8000ac8 <serial_init>
	int pom_dlugosc_ramki = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
	int max = 7;
 80008f0:	2307      	movs	r3, #7
 80008f2:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(serial_available())
 80008f4:	e026      	b.n	8000944 <main+0x74>
	  {
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80008f6:	2120      	movs	r1, #32
 80008f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008fc:	f000 ff44 	bl	8001788 <HAL_GPIO_TogglePin>
		  znak = serial_read();
 8000900:	f000 f96a 	bl	8000bd8 <serial_read>
 8000904:	4603      	mov	r3, r0
 8000906:	71fb      	strb	r3, [r7, #7]
		  if(znak == 0x02){max = 7;}
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	2b02      	cmp	r3, #2
 800090c:	d101      	bne.n	8000912 <main+0x42>
 800090e:	2307      	movs	r3, #7
 8000910:	60bb      	str	r3, [r7, #8]
		  if(znak == 0x05){max = 9;}
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	2b05      	cmp	r3, #5
 8000916:	d101      	bne.n	800091c <main+0x4c>
 8000918:	2309      	movs	r3, #9
 800091a:	60bb      	str	r3, [r7, #8]
		  if(pom_dlugosc_ramki >= max)
 800091c:	68fa      	ldr	r2, [r7, #12]
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	429a      	cmp	r2, r3
 8000922:	db07      	blt.n	8000934 <main+0x64>
		  {
			  maszyna_stanu(znak, true);
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	2101      	movs	r1, #1
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff fdd7 	bl	80004dc <maszyna_stanu>
			  pom_dlugosc_ramki = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	e007      	b.n	8000944 <main+0x74>
		  }
		  else
		  {
			  maszyna_stanu(znak, false);
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	2100      	movs	r1, #0
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fdcf 	bl	80004dc <maszyna_stanu>
			  pom_dlugosc_ramki++;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	3301      	adds	r3, #1
 8000942:	60fb      	str	r3, [r7, #12]
	  while(serial_available())
 8000944:	f000 f8f0 	bl	8000b28 <serial_available>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d1d3      	bne.n	80008f6 <main+0x26>
 800094e:	e7f9      	b.n	8000944 <main+0x74>
 8000950:	2000005c 	.word	0x2000005c

08000954 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b096      	sub	sp, #88	; 0x58
 8000958:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	2244      	movs	r2, #68	; 0x44
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f003 fef6 	bl	8004754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000968:	463b      	mov	r3, r7
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
 8000974:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000976:	f44f 7000 	mov.w	r0, #512	; 0x200
 800097a:	f000 ff2d 	bl	80017d8 <HAL_PWREx_ControlVoltageScaling>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000984:	f000 f89a 	bl	8000abc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000988:	2310      	movs	r3, #16
 800098a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800098c:	2301      	movs	r3, #1
 800098e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000994:	2360      	movs	r3, #96	; 0x60
 8000996:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000998:	2300      	movs	r3, #0
 800099a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	4618      	mov	r0, r3
 80009a2:	f000 ff6f 	bl	8001884 <HAL_RCC_OscConfig>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80009ac:	f000 f886 	bl	8000abc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b0:	230f      	movs	r3, #15
 80009b2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80009b4:	2300      	movs	r3, #0
 80009b6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b8:	2300      	movs	r3, #0
 80009ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009bc:	2300      	movs	r3, #0
 80009be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009c0:	2300      	movs	r3, #0
 80009c2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009c4:	463b      	mov	r3, r7
 80009c6:	2100      	movs	r1, #0
 80009c8:	4618      	mov	r0, r3
 80009ca:	f001 fb43 	bl	8002054 <HAL_RCC_ClockConfig>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80009d4:	f000 f872 	bl	8000abc <Error_Handler>
  }
}
 80009d8:	bf00      	nop
 80009da:	3758      	adds	r7, #88	; 0x58
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009e4:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <MX_USART2_UART_Init+0x58>)
 80009e6:	4a15      	ldr	r2, [pc, #84]	; (8000a3c <MX_USART2_UART_Init+0x5c>)
 80009e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009ea:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <MX_USART2_UART_Init+0x58>)
 80009ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <MX_USART2_UART_Init+0x58>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <MX_USART2_UART_Init+0x58>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <MX_USART2_UART_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <MX_USART2_UART_Init+0x58>)
 8000a06:	220c      	movs	r2, #12
 8000a08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <MX_USART2_UART_Init+0x58>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a10:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <MX_USART2_UART_Init+0x58>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <MX_USART2_UART_Init+0x58>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <MX_USART2_UART_Init+0x58>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a22:	4805      	ldr	r0, [pc, #20]	; (8000a38 <MX_USART2_UART_Init+0x58>)
 8000a24:	f002 f9d8 	bl	8002dd8 <HAL_UART_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a2e:	f000 f845 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	2000005c 	.word	0x2000005c
 8000a3c:	40004400 	.word	0x40004400

08000a40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a54:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <MX_GPIO_Init+0x78>)
 8000a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a58:	4a17      	ldr	r2, [pc, #92]	; (8000ab8 <MX_GPIO_Init+0x78>)
 8000a5a:	f043 0301 	orr.w	r3, r3, #1
 8000a5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a60:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <MX_GPIO_Init+0x78>)
 8000a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a64:	f003 0301 	and.w	r3, r3, #1
 8000a68:	603b      	str	r3, [r7, #0]
 8000a6a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2120      	movs	r1, #32
 8000a70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a74:	f000 fe70 	bl	8001758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000a78:	2320      	movs	r3, #32
 8000a7a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2300      	movs	r3, #0
 8000a86:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a90:	f000 fcb8 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8000a94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a98:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aaa:	f000 fcab 	bl	8001404 <HAL_GPIO_Init>

}
 8000aae:	bf00      	nop
 8000ab0:	3718      	adds	r7, #24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40021000 	.word	0x40021000

08000abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac0:	b672      	cpsid	i
}
 8000ac2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <Error_Handler+0x8>
	...

08000ac8 <serial_init>:

uint8_t TX_BUSY;
uint16_t crc_rx_global = 0xFFFF;
uint16_t crc_tx_global = 0xFFFF;

void serial_init(UART_HandleTypeDef *huart) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	ser_buff.front = 0;
 8000ad0:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <serial_init+0x4c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	ser_buff.back = 0;
 8000ad8:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <serial_init+0x4c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
	tx_ser_buff.front = 0;
 8000ae0:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <serial_init+0x50>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	tx_ser_buff.back = 0;
 8000ae8:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <serial_init+0x50>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
	TX_BUSY = 0;
 8000af0:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <serial_init+0x54>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	701a      	strb	r2, [r3, #0]
	serial_huart = huart;
 8000af6:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <serial_init+0x58>)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(serial_huart, &rx_char, 1);
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <serial_init+0x58>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2201      	movs	r2, #1
 8000b02:	4908      	ldr	r1, [pc, #32]	; (8000b24 <serial_init+0x5c>)
 8000b04:	4618      	mov	r0, r3
 8000b06:	f002 fab7 	bl	8003078 <HAL_UART_Receive_IT>
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200001f4 	.word	0x200001f4
 8000b18:	200005fc 	.word	0x200005fc
 8000b1c:	20000a06 	.word	0x20000a06
 8000b20:	200001f0 	.word	0x200001f0
 8000b24:	20000a04 	.word	0x20000a04

08000b28 <serial_available>:

uint32_t serial_available(void) {
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
	if(ser_buff.back > ser_buff.front) {
 8000b2c:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <serial_available+0x54>)
 8000b2e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8000b32:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <serial_available+0x54>)
 8000b34:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d907      	bls.n	8000b4c <serial_available+0x24>
		return ser_buff.back - ser_buff.front;
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <serial_available+0x54>)
 8000b3e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <serial_available+0x54>)
 8000b44:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	e012      	b.n	8000b72 <serial_available+0x4a>
	}
	else if(ser_buff.back < ser_buff.front) {
 8000b4c:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <serial_available+0x54>)
 8000b4e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8000b52:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <serial_available+0x54>)
 8000b54:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d209      	bcs.n	8000b70 <serial_available+0x48>
		return ser_buff.back + SERIAL_BUFFER_SIZE - ser_buff.front;
 8000b5c:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <serial_available+0x54>)
 8000b5e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <serial_available+0x54>)
 8000b64:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000b6e:	e000      	b.n	8000b72 <serial_available+0x4a>
	}
	else {
		return 0;
 8000b70:	2300      	movs	r3, #0
	}
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	200001f4 	.word	0x200001f4

08000b80 <tx_available>:
	else {
		return 0;
	}
}

uint32_t tx_available(void) {
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
	if(tx_ser_buff.back > tx_ser_buff.front) {
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <tx_available+0x54>)
 8000b86:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8000b8a:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <tx_available+0x54>)
 8000b8c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d907      	bls.n	8000ba4 <tx_available+0x24>
		return tx_ser_buff.back - tx_ser_buff.front;
 8000b94:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <tx_available+0x54>)
 8000b96:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <tx_available+0x54>)
 8000b9c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	e012      	b.n	8000bca <tx_available+0x4a>
	}
	else if(tx_ser_buff.back < tx_ser_buff.front) {
 8000ba4:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <tx_available+0x54>)
 8000ba6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8000baa:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <tx_available+0x54>)
 8000bac:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d209      	bcs.n	8000bc8 <tx_available+0x48>
		return tx_ser_buff.back + SERIAL_BUFFER_SIZE - tx_ser_buff.front;
 8000bb4:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <tx_available+0x54>)
 8000bb6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <tx_available+0x54>)
 8000bbc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000bc6:	e000      	b.n	8000bca <tx_available+0x4a>
	}
	else {
		return 0;
 8000bc8:	2300      	movs	r3, #0
	}
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	200005fc 	.word	0x200005fc

08000bd8 <serial_read>:

char serial_read(void) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
	char c = '\0';
 8000bde:	2300      	movs	r3, #0
 8000be0:	71fb      	strb	r3, [r7, #7]
	if(serial_available()) {
 8000be2:	f7ff ffa1 	bl	8000b28 <serial_available>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d013      	beq.n	8000c14 <serial_read+0x3c>
		c = ser_buff.buffer[ser_buff.back++];
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <serial_read+0x48>)
 8000bee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000bf2:	1c5a      	adds	r2, r3, #1
 8000bf4:	490a      	ldr	r1, [pc, #40]	; (8000c20 <serial_read+0x48>)
 8000bf6:	f8c1 2404 	str.w	r2, [r1, #1028]	; 0x404
 8000bfa:	4a09      	ldr	r2, [pc, #36]	; (8000c20 <serial_read+0x48>)
 8000bfc:	5cd3      	ldrb	r3, [r2, r3]
 8000bfe:	71fb      	strb	r3, [r7, #7]
		if(SERIAL_BUFFER_SIZE == ser_buff.back)
 8000c00:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <serial_read+0x48>)
 8000c02:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000c06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c0a:	d103      	bne.n	8000c14 <serial_read+0x3c>
			ser_buff.back = 0;
 8000c0c:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <serial_read+0x48>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
	}
	return c;
 8000c14:	79fb      	ldrb	r3, [r7, #7]
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	200001f4 	.word	0x200001f4

08000c24 <get_tx>:

void get_tx(uint8_t* c) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	if(tx_available()) {
 8000c2c:	f7ff ffa8 	bl	8000b80 <tx_available>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d014      	beq.n	8000c60 <get_tx+0x3c>
		*c = tx_ser_buff.buffer[tx_ser_buff.back++];
 8000c36:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <get_tx+0x44>)
 8000c38:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000c3c:	1c5a      	adds	r2, r3, #1
 8000c3e:	490a      	ldr	r1, [pc, #40]	; (8000c68 <get_tx+0x44>)
 8000c40:	f8c1 2404 	str.w	r2, [r1, #1028]	; 0x404
 8000c44:	4a08      	ldr	r2, [pc, #32]	; (8000c68 <get_tx+0x44>)
 8000c46:	5cd2      	ldrb	r2, [r2, r3]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	701a      	strb	r2, [r3, #0]
		if(SERIAL_BUFFER_SIZE == tx_ser_buff.back)
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <get_tx+0x44>)
 8000c4e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c56:	d103      	bne.n	8000c60 <get_tx+0x3c>
			tx_ser_buff.back = 0;
 8000c58:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <get_tx+0x44>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
	}
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	200005fc 	.word	0x200005fc

08000c6c <serial_push>:

void serial_flush() {
	serial_init(serial_huart);
}

void serial_push(char c) {
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
	ser_buff.buffer[ser_buff.front++] = c;
 8000c76:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <serial_push+0x40>)
 8000c78:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000c7c:	1c5a      	adds	r2, r3, #1
 8000c7e:	490b      	ldr	r1, [pc, #44]	; (8000cac <serial_push+0x40>)
 8000c80:	f8c1 2400 	str.w	r2, [r1, #1024]	; 0x400
 8000c84:	4909      	ldr	r1, [pc, #36]	; (8000cac <serial_push+0x40>)
 8000c86:	79fa      	ldrb	r2, [r7, #7]
 8000c88:	54ca      	strb	r2, [r1, r3]
	if(ser_buff.front == SERIAL_BUFFER_SIZE)
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <serial_push+0x40>)
 8000c8c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000c90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c94:	d103      	bne.n	8000c9e <serial_push+0x32>
		ser_buff.front = 0;
 8000c96:	4b05      	ldr	r3, [pc, #20]	; (8000cac <serial_push+0x40>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	200001f4 	.word	0x200001f4

08000cb0 <put_tx>:


void put_tx(char c) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
	tx_ser_buff.buffer[tx_ser_buff.front++] = c;
 8000cba:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <put_tx+0x4c>)
 8000cbc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000cc0:	1c5a      	adds	r2, r3, #1
 8000cc2:	490e      	ldr	r1, [pc, #56]	; (8000cfc <put_tx+0x4c>)
 8000cc4:	f8c1 2400 	str.w	r2, [r1, #1024]	; 0x400
 8000cc8:	490c      	ldr	r1, [pc, #48]	; (8000cfc <put_tx+0x4c>)
 8000cca:	79fa      	ldrb	r2, [r7, #7]
 8000ccc:	54ca      	strb	r2, [r1, r3]
	if(tx_ser_buff.front == SERIAL_BUFFER_SIZE){
 8000cce:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <put_tx+0x4c>)
 8000cd0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000cd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cd8:	d103      	bne.n	8000ce2 <put_tx+0x32>
		tx_ser_buff.front = 0;
 8000cda:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <put_tx+0x4c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	}
	if (TX_BUSY == 0){
 8000ce2:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <put_tx+0x50>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d104      	bne.n	8000cf4 <put_tx+0x44>
		HAL_UART_TxCpltCallback(serial_huart);
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <put_tx+0x54>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 f82a 	bl	8000d48 <HAL_UART_TxCpltCallback>
	}

}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	200005fc 	.word	0x200005fc
 8000d00:	20000a06 	.word	0x20000a06
 8000d04:	200001f0 	.word	0x200001f0

08000d08 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
	serial_push(rx_char);
 8000d10:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <HAL_UART_RxCpltCallback+0x34>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff ffa9 	bl	8000c6c <serial_push>
	crc16_update(&crc_rx_global, rx_char);
 8000d1a:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <HAL_UART_RxCpltCallback+0x34>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4807      	ldr	r0, [pc, #28]	; (8000d40 <HAL_UART_RxCpltCallback+0x38>)
 8000d22:	f000 f83d 	bl	8000da0 <crc16_update>
	HAL_UART_Receive_IT(serial_huart, &rx_char, 1);
 8000d26:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <HAL_UART_RxCpltCallback+0x3c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	4903      	ldr	r1, [pc, #12]	; (8000d3c <HAL_UART_RxCpltCallback+0x34>)
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f002 f9a2 	bl	8003078 <HAL_UART_Receive_IT>
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000a04 	.word	0x20000a04
 8000d40:	20000030 	.word	0x20000030
 8000d44:	200001f0 	.word	0x200001f0

08000d48 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	if(tx_available()){
 8000d50:	f7ff ff16 	bl	8000b80 <tx_available>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d013      	beq.n	8000d82 <HAL_UART_TxCpltCallback+0x3a>
		TX_BUSY = 1;
 8000d5a:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <HAL_UART_TxCpltCallback+0x48>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	701a      	strb	r2, [r3, #0]
		get_tx(&tx_char);
 8000d60:	480c      	ldr	r0, [pc, #48]	; (8000d94 <HAL_UART_TxCpltCallback+0x4c>)
 8000d62:	f7ff ff5f 	bl	8000c24 <get_tx>
		crc16_update(&crc_tx_global, tx_char);
 8000d66:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <HAL_UART_TxCpltCallback+0x4c>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	480a      	ldr	r0, [pc, #40]	; (8000d98 <HAL_UART_TxCpltCallback+0x50>)
 8000d6e:	f000 f817 	bl	8000da0 <crc16_update>
		HAL_UART_Transmit_IT(serial_huart, &tx_char, 1);
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <HAL_UART_TxCpltCallback+0x54>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2201      	movs	r2, #1
 8000d78:	4906      	ldr	r1, [pc, #24]	; (8000d94 <HAL_UART_TxCpltCallback+0x4c>)
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f002 f90e 	bl	8002f9c <HAL_UART_Transmit_IT>
	}
	else
	{
		TX_BUSY = 0;
	}
}
 8000d80:	e002      	b.n	8000d88 <HAL_UART_TxCpltCallback+0x40>
		TX_BUSY = 0;
 8000d82:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <HAL_UART_TxCpltCallback+0x48>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000a06 	.word	0x20000a06
 8000d94:	20000a05 	.word	0x20000a05
 8000d98:	20000032 	.word	0x20000032
 8000d9c:	200001f0 	.word	0x200001f0

08000da0 <crc16_update>:
uint32_t get_back(void) {
	return ser_buff.back;
}


void crc16_update(uint16_t* crc, uint8_t a) {
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	460b      	mov	r3, r1
 8000daa:	70fb      	strb	r3, [r7, #3]
	int i;
	//crc_tx_global = crc_tx;
	*crc ^= (uint16_t)a;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	881a      	ldrh	r2, [r3, #0]
 8000db0:	78fb      	ldrb	r3, [r7, #3]
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	4053      	eors	r3, r2
 8000db6:	b29a      	uxth	r2, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < 8; ++i) {
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	e018      	b.n	8000df4 <crc16_update+0x54>
		if (*crc & 1)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	881b      	ldrh	r3, [r3, #0]
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d009      	beq.n	8000de2 <crc16_update+0x42>
		{
			*crc = (*crc >> 1) ^ 0xA001;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	881b      	ldrh	r3, [r3, #0]
 8000dd2:	085b      	lsrs	r3, r3, #1
 8000dd4:	b29a      	uxth	r2, r3
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <crc16_update+0x68>)
 8000dd8:	4053      	eors	r3, r2
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	801a      	strh	r2, [r3, #0]
 8000de0:	e005      	b.n	8000dee <crc16_update+0x4e>
		}
		else
		{
			*crc = (*crc >> 1);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	881b      	ldrh	r3, [r3, #0]
 8000de6:	085b      	lsrs	r3, r3, #1
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < 8; ++i) {
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	3301      	adds	r3, #1
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	2b07      	cmp	r3, #7
 8000df8:	dde3      	ble.n	8000dc2 <crc16_update+0x22>
		}
	}
}
 8000dfa:	bf00      	nop
 8000dfc:	bf00      	nop
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	ffffa001 	.word	0xffffa001

08000e0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e12:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <HAL_MspInit+0x44>)
 8000e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e16:	4a0e      	ldr	r2, [pc, #56]	; (8000e50 <HAL_MspInit+0x44>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e1e:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <HAL_MspInit+0x44>)
 8000e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	607b      	str	r3, [r7, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2a:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <HAL_MspInit+0x44>)
 8000e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e2e:	4a08      	ldr	r2, [pc, #32]	; (8000e50 <HAL_MspInit+0x44>)
 8000e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e34:	6593      	str	r3, [r2, #88]	; 0x58
 8000e36:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <HAL_MspInit+0x44>)
 8000e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3e:	603b      	str	r3, [r7, #0]
 8000e40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	40021000 	.word	0x40021000

08000e54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b0ac      	sub	sp, #176	; 0xb0
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	2288      	movs	r2, #136	; 0x88
 8000e72:	2100      	movs	r1, #0
 8000e74:	4618      	mov	r0, r3
 8000e76:	f003 fc6d 	bl	8004754 <memset>
  if(huart->Instance==USART2)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a25      	ldr	r2, [pc, #148]	; (8000f14 <HAL_UART_MspInit+0xc0>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d143      	bne.n	8000f0c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e84:	2302      	movs	r3, #2
 8000e86:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4618      	mov	r0, r3
 8000e92:	f001 fae5 	bl	8002460 <HAL_RCCEx_PeriphCLKConfig>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e9c:	f7ff fe0e 	bl	8000abc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ea0:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <HAL_UART_MspInit+0xc4>)
 8000ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea4:	4a1c      	ldr	r2, [pc, #112]	; (8000f18 <HAL_UART_MspInit+0xc4>)
 8000ea6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eaa:	6593      	str	r3, [r2, #88]	; 0x58
 8000eac:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <HAL_UART_MspInit+0xc4>)
 8000eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb8:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <HAL_UART_MspInit+0xc4>)
 8000eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebc:	4a16      	ldr	r2, [pc, #88]	; (8000f18 <HAL_UART_MspInit+0xc4>)
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec4:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <HAL_UART_MspInit+0xc4>)
 8000ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ed0:	230c      	movs	r3, #12
 8000ed2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ee8:	2307      	movs	r3, #7
 8000eea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef8:	f000 fa84 	bl	8001404 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000efc:	2200      	movs	r2, #0
 8000efe:	2100      	movs	r1, #0
 8000f00:	2026      	movs	r0, #38	; 0x26
 8000f02:	f000 f9ca 	bl	800129a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f06:	2026      	movs	r0, #38	; 0x26
 8000f08:	f000 f9e3 	bl	80012d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f0c:	bf00      	nop
 8000f0e:	37b0      	adds	r7, #176	; 0xb0
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40004400 	.word	0x40004400
 8000f18:	40021000 	.word	0x40021000

08000f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <NMI_Handler+0x4>

08000f22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f26:	e7fe      	b.n	8000f26 <HardFault_Handler+0x4>

08000f28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <MemManage_Handler+0x4>

08000f2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <BusFault_Handler+0x4>

08000f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <UsageFault_Handler+0x4>

08000f3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f68:	f000 f89c 	bl	80010a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f74:	4802      	ldr	r0, [pc, #8]	; (8000f80 <USART2_IRQHandler+0x10>)
 8000f76:	f002 f8d5 	bl	8003124 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	2000005c 	.word	0x2000005c

08000f84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <SystemInit+0x20>)
 8000f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f8e:	4a05      	ldr	r2, [pc, #20]	; (8000fa4 <SystemInit+0x20>)
 8000f90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fe0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fac:	f7ff ffea 	bl	8000f84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb0:	480c      	ldr	r0, [pc, #48]	; (8000fe4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fb2:	490d      	ldr	r1, [pc, #52]	; (8000fe8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fb4:	4a0d      	ldr	r2, [pc, #52]	; (8000fec <LoopForever+0xe>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb8:	e002      	b.n	8000fc0 <LoopCopyDataInit>

08000fba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fbe:	3304      	adds	r3, #4

08000fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc4:	d3f9      	bcc.n	8000fba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc6:	4a0a      	ldr	r2, [pc, #40]	; (8000ff0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fc8:	4c0a      	ldr	r4, [pc, #40]	; (8000ff4 <LoopForever+0x16>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fcc:	e001      	b.n	8000fd2 <LoopFillZerobss>

08000fce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd0:	3204      	adds	r2, #4

08000fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd4:	d3fb      	bcc.n	8000fce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fd6:	f003 fb99 	bl	800470c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fda:	f7ff fc79 	bl	80008d0 <main>

08000fde <LoopForever>:

LoopForever:
    b LoopForever
 8000fde:	e7fe      	b.n	8000fde <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fe0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe8:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8000fec:	080047d4 	.word	0x080047d4
  ldr r2, =_sbss
 8000ff0:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8000ff4:	20000a0c 	.word	0x20000a0c

08000ff8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ff8:	e7fe      	b.n	8000ff8 <ADC1_2_IRQHandler>

08000ffa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001000:	2300      	movs	r3, #0
 8001002:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001004:	2003      	movs	r0, #3
 8001006:	f000 f93d 	bl	8001284 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800100a:	2000      	movs	r0, #0
 800100c:	f000 f80e 	bl	800102c <HAL_InitTick>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d002      	beq.n	800101c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	71fb      	strb	r3, [r7, #7]
 800101a:	e001      	b.n	8001020 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800101c:	f7ff fef6 	bl	8000e0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001020:	79fb      	ldrb	r3, [r7, #7]
}
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001034:	2300      	movs	r3, #0
 8001036:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001038:	4b17      	ldr	r3, [pc, #92]	; (8001098 <HAL_InitTick+0x6c>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d023      	beq.n	8001088 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001040:	4b16      	ldr	r3, [pc, #88]	; (800109c <HAL_InitTick+0x70>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b14      	ldr	r3, [pc, #80]	; (8001098 <HAL_InitTick+0x6c>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4619      	mov	r1, r3
 800104a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001052:	fbb2 f3f3 	udiv	r3, r2, r3
 8001056:	4618      	mov	r0, r3
 8001058:	f000 f949 	bl	80012ee <HAL_SYSTICK_Config>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d10f      	bne.n	8001082 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b0f      	cmp	r3, #15
 8001066:	d809      	bhi.n	800107c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001068:	2200      	movs	r2, #0
 800106a:	6879      	ldr	r1, [r7, #4]
 800106c:	f04f 30ff 	mov.w	r0, #4294967295
 8001070:	f000 f913 	bl	800129a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001074:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <HAL_InitTick+0x74>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6013      	str	r3, [r2, #0]
 800107a:	e007      	b.n	800108c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	73fb      	strb	r3, [r7, #15]
 8001080:	e004      	b.n	800108c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	73fb      	strb	r3, [r7, #15]
 8001086:	e001      	b.n	800108c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800108c:	7bfb      	ldrb	r3, [r7, #15]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	2000003c 	.word	0x2000003c
 800109c:	20000034 	.word	0x20000034
 80010a0:	20000038 	.word	0x20000038

080010a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <HAL_IncTick+0x20>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	461a      	mov	r2, r3
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <HAL_IncTick+0x24>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4413      	add	r3, r2
 80010b4:	4a04      	ldr	r2, [pc, #16]	; (80010c8 <HAL_IncTick+0x24>)
 80010b6:	6013      	str	r3, [r2, #0]
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	2000003c 	.word	0x2000003c
 80010c8:	20000a08 	.word	0x20000a08

080010cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  return uwTick;
 80010d0:	4b03      	ldr	r3, [pc, #12]	; (80010e0 <HAL_GetTick+0x14>)
 80010d2:	681b      	ldr	r3, [r3, #0]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	20000a08 	.word	0x20000a08

080010e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <__NVIC_SetPriorityGrouping+0x44>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010fa:	68ba      	ldr	r2, [r7, #8]
 80010fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001100:	4013      	ands	r3, r2
 8001102:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800110c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001116:	4a04      	ldr	r2, [pc, #16]	; (8001128 <__NVIC_SetPriorityGrouping+0x44>)
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	60d3      	str	r3, [r2, #12]
}
 800111c:	bf00      	nop
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <__NVIC_GetPriorityGrouping+0x18>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	0a1b      	lsrs	r3, r3, #8
 8001136:	f003 0307 	and.w	r3, r3, #7
}
 800113a:	4618      	mov	r0, r3
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	2b00      	cmp	r3, #0
 8001158:	db0b      	blt.n	8001172 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	f003 021f 	and.w	r2, r3, #31
 8001160:	4907      	ldr	r1, [pc, #28]	; (8001180 <__NVIC_EnableIRQ+0x38>)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	095b      	lsrs	r3, r3, #5
 8001168:	2001      	movs	r0, #1
 800116a:	fa00 f202 	lsl.w	r2, r0, r2
 800116e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	e000e100 	.word	0xe000e100

08001184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	6039      	str	r1, [r7, #0]
 800118e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001194:	2b00      	cmp	r3, #0
 8001196:	db0a      	blt.n	80011ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	b2da      	uxtb	r2, r3
 800119c:	490c      	ldr	r1, [pc, #48]	; (80011d0 <__NVIC_SetPriority+0x4c>)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	0112      	lsls	r2, r2, #4
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	440b      	add	r3, r1
 80011a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011ac:	e00a      	b.n	80011c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4908      	ldr	r1, [pc, #32]	; (80011d4 <__NVIC_SetPriority+0x50>)
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	f003 030f 	and.w	r3, r3, #15
 80011ba:	3b04      	subs	r3, #4
 80011bc:	0112      	lsls	r2, r2, #4
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	440b      	add	r3, r1
 80011c2:	761a      	strb	r2, [r3, #24]
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	e000e100 	.word	0xe000e100
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d8:	b480      	push	{r7}
 80011da:	b089      	sub	sp, #36	; 0x24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f1c3 0307 	rsb	r3, r3, #7
 80011f2:	2b04      	cmp	r3, #4
 80011f4:	bf28      	it	cs
 80011f6:	2304      	movcs	r3, #4
 80011f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3304      	adds	r3, #4
 80011fe:	2b06      	cmp	r3, #6
 8001200:	d902      	bls.n	8001208 <NVIC_EncodePriority+0x30>
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3b03      	subs	r3, #3
 8001206:	e000      	b.n	800120a <NVIC_EncodePriority+0x32>
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	f04f 32ff 	mov.w	r2, #4294967295
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43da      	mvns	r2, r3
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	401a      	ands	r2, r3
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001220:	f04f 31ff 	mov.w	r1, #4294967295
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	fa01 f303 	lsl.w	r3, r1, r3
 800122a:	43d9      	mvns	r1, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001230:	4313      	orrs	r3, r2
         );
}
 8001232:	4618      	mov	r0, r3
 8001234:	3724      	adds	r7, #36	; 0x24
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
	...

08001240 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3b01      	subs	r3, #1
 800124c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001250:	d301      	bcc.n	8001256 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001252:	2301      	movs	r3, #1
 8001254:	e00f      	b.n	8001276 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001256:	4a0a      	ldr	r2, [pc, #40]	; (8001280 <SysTick_Config+0x40>)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3b01      	subs	r3, #1
 800125c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800125e:	210f      	movs	r1, #15
 8001260:	f04f 30ff 	mov.w	r0, #4294967295
 8001264:	f7ff ff8e 	bl	8001184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001268:	4b05      	ldr	r3, [pc, #20]	; (8001280 <SysTick_Config+0x40>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800126e:	4b04      	ldr	r3, [pc, #16]	; (8001280 <SysTick_Config+0x40>)
 8001270:	2207      	movs	r2, #7
 8001272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	e000e010 	.word	0xe000e010

08001284 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f7ff ff29 	bl	80010e4 <__NVIC_SetPriorityGrouping>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b086      	sub	sp, #24
 800129e:	af00      	add	r7, sp, #0
 80012a0:	4603      	mov	r3, r0
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	607a      	str	r2, [r7, #4]
 80012a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012ac:	f7ff ff3e 	bl	800112c <__NVIC_GetPriorityGrouping>
 80012b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	68b9      	ldr	r1, [r7, #8]
 80012b6:	6978      	ldr	r0, [r7, #20]
 80012b8:	f7ff ff8e 	bl	80011d8 <NVIC_EncodePriority>
 80012bc:	4602      	mov	r2, r0
 80012be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c2:	4611      	mov	r1, r2
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff5d 	bl	8001184 <__NVIC_SetPriority>
}
 80012ca:	bf00      	nop
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	4603      	mov	r3, r0
 80012da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ff31 	bl	8001148 <__NVIC_EnableIRQ>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff ffa2 	bl	8001240 <SysTick_Config>
 80012fc:	4603      	mov	r3, r0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001306:	b480      	push	{r7}
 8001308:	b085      	sub	sp, #20
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800130e:	2300      	movs	r3, #0
 8001310:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d008      	beq.n	8001330 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2204      	movs	r2, #4
 8001322:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e022      	b.n	8001376 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f022 020e 	bic.w	r2, r2, #14
 800133e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f022 0201 	bic.w	r2, r2, #1
 800134e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001354:	f003 021c 	and.w	r2, r3, #28
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135c:	2101      	movs	r1, #1
 800135e:	fa01 f202 	lsl.w	r2, r1, r2
 8001362:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001374:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001376:	4618      	mov	r0, r3
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b084      	sub	sp, #16
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800138a:	2300      	movs	r3, #0
 800138c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001394:	b2db      	uxtb	r3, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d005      	beq.n	80013a6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2204      	movs	r2, #4
 800139e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	73fb      	strb	r3, [r7, #15]
 80013a4:	e029      	b.n	80013fa <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f022 020e 	bic.w	r2, r2, #14
 80013b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f022 0201 	bic.w	r2, r2, #1
 80013c4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	f003 021c 	and.w	r2, r3, #28
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	2101      	movs	r1, #1
 80013d4:	fa01 f202 	lsl.w	r2, r1, r2
 80013d8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2201      	movs	r2, #1
 80013de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	4798      	blx	r3
    }
  }
  return status;
 80013fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001404:	b480      	push	{r7}
 8001406:	b087      	sub	sp, #28
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001412:	e17f      	b.n	8001714 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	2101      	movs	r1, #1
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	fa01 f303 	lsl.w	r3, r1, r3
 8001420:	4013      	ands	r3, r2
 8001422:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2b00      	cmp	r3, #0
 8001428:	f000 8171 	beq.w	800170e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f003 0303 	and.w	r3, r3, #3
 8001434:	2b01      	cmp	r3, #1
 8001436:	d005      	beq.n	8001444 <HAL_GPIO_Init+0x40>
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 0303 	and.w	r3, r3, #3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d130      	bne.n	80014a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	2203      	movs	r2, #3
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	43db      	mvns	r3, r3
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4013      	ands	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	68da      	ldr	r2, [r3, #12]
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	4313      	orrs	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800147a:	2201      	movs	r2, #1
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43db      	mvns	r3, r3
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	4013      	ands	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	091b      	lsrs	r3, r3, #4
 8001490:	f003 0201 	and.w	r2, r3, #1
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	4313      	orrs	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 0303 	and.w	r3, r3, #3
 80014ae:	2b03      	cmp	r3, #3
 80014b0:	d118      	bne.n	80014e4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80014b8:	2201      	movs	r2, #1
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4013      	ands	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	f003 0201 	and.w	r2, r3, #1
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	4313      	orrs	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 0303 	and.w	r3, r3, #3
 80014ec:	2b03      	cmp	r3, #3
 80014ee:	d017      	beq.n	8001520 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	2203      	movs	r2, #3
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	43db      	mvns	r3, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4013      	ands	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	4313      	orrs	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 0303 	and.w	r3, r3, #3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d123      	bne.n	8001574 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	08da      	lsrs	r2, r3, #3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3208      	adds	r2, #8
 8001534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001538:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	f003 0307 	and.w	r3, r3, #7
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	220f      	movs	r2, #15
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4013      	ands	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	691a      	ldr	r2, [r3, #16]
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	4313      	orrs	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	08da      	lsrs	r2, r3, #3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	3208      	adds	r2, #8
 800156e:	6939      	ldr	r1, [r7, #16]
 8001570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	2203      	movs	r2, #3
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	4013      	ands	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 0203 	and.w	r2, r3, #3
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	4313      	orrs	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f000 80ac 	beq.w	800170e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b6:	4b5f      	ldr	r3, [pc, #380]	; (8001734 <HAL_GPIO_Init+0x330>)
 80015b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ba:	4a5e      	ldr	r2, [pc, #376]	; (8001734 <HAL_GPIO_Init+0x330>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6613      	str	r3, [r2, #96]	; 0x60
 80015c2:	4b5c      	ldr	r3, [pc, #368]	; (8001734 <HAL_GPIO_Init+0x330>)
 80015c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015ce:	4a5a      	ldr	r2, [pc, #360]	; (8001738 <HAL_GPIO_Init+0x334>)
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	089b      	lsrs	r3, r3, #2
 80015d4:	3302      	adds	r3, #2
 80015d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015da:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	f003 0303 	and.w	r3, r3, #3
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	220f      	movs	r2, #15
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	43db      	mvns	r3, r3
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	4013      	ands	r3, r2
 80015f0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015f8:	d025      	beq.n	8001646 <HAL_GPIO_Init+0x242>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a4f      	ldr	r2, [pc, #316]	; (800173c <HAL_GPIO_Init+0x338>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d01f      	beq.n	8001642 <HAL_GPIO_Init+0x23e>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a4e      	ldr	r2, [pc, #312]	; (8001740 <HAL_GPIO_Init+0x33c>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d019      	beq.n	800163e <HAL_GPIO_Init+0x23a>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a4d      	ldr	r2, [pc, #308]	; (8001744 <HAL_GPIO_Init+0x340>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d013      	beq.n	800163a <HAL_GPIO_Init+0x236>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a4c      	ldr	r2, [pc, #304]	; (8001748 <HAL_GPIO_Init+0x344>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d00d      	beq.n	8001636 <HAL_GPIO_Init+0x232>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a4b      	ldr	r2, [pc, #300]	; (800174c <HAL_GPIO_Init+0x348>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d007      	beq.n	8001632 <HAL_GPIO_Init+0x22e>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a4a      	ldr	r2, [pc, #296]	; (8001750 <HAL_GPIO_Init+0x34c>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d101      	bne.n	800162e <HAL_GPIO_Init+0x22a>
 800162a:	2306      	movs	r3, #6
 800162c:	e00c      	b.n	8001648 <HAL_GPIO_Init+0x244>
 800162e:	2307      	movs	r3, #7
 8001630:	e00a      	b.n	8001648 <HAL_GPIO_Init+0x244>
 8001632:	2305      	movs	r3, #5
 8001634:	e008      	b.n	8001648 <HAL_GPIO_Init+0x244>
 8001636:	2304      	movs	r3, #4
 8001638:	e006      	b.n	8001648 <HAL_GPIO_Init+0x244>
 800163a:	2303      	movs	r3, #3
 800163c:	e004      	b.n	8001648 <HAL_GPIO_Init+0x244>
 800163e:	2302      	movs	r3, #2
 8001640:	e002      	b.n	8001648 <HAL_GPIO_Init+0x244>
 8001642:	2301      	movs	r3, #1
 8001644:	e000      	b.n	8001648 <HAL_GPIO_Init+0x244>
 8001646:	2300      	movs	r3, #0
 8001648:	697a      	ldr	r2, [r7, #20]
 800164a:	f002 0203 	and.w	r2, r2, #3
 800164e:	0092      	lsls	r2, r2, #2
 8001650:	4093      	lsls	r3, r2
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	4313      	orrs	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001658:	4937      	ldr	r1, [pc, #220]	; (8001738 <HAL_GPIO_Init+0x334>)
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	089b      	lsrs	r3, r3, #2
 800165e:	3302      	adds	r3, #2
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001666:	4b3b      	ldr	r3, [pc, #236]	; (8001754 <HAL_GPIO_Init+0x350>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	43db      	mvns	r3, r3
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	4013      	ands	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4313      	orrs	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800168a:	4a32      	ldr	r2, [pc, #200]	; (8001754 <HAL_GPIO_Init+0x350>)
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001690:	4b30      	ldr	r3, [pc, #192]	; (8001754 <HAL_GPIO_Init+0x350>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	43db      	mvns	r3, r3
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	4013      	ands	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d003      	beq.n	80016b4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016b4:	4a27      	ldr	r2, [pc, #156]	; (8001754 <HAL_GPIO_Init+0x350>)
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016ba:	4b26      	ldr	r3, [pc, #152]	; (8001754 <HAL_GPIO_Init+0x350>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	43db      	mvns	r3, r3
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	4013      	ands	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	4313      	orrs	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016de:	4a1d      	ldr	r2, [pc, #116]	; (8001754 <HAL_GPIO_Init+0x350>)
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80016e4:	4b1b      	ldr	r3, [pc, #108]	; (8001754 <HAL_GPIO_Init+0x350>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4013      	ands	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	4313      	orrs	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001708:	4a12      	ldr	r2, [pc, #72]	; (8001754 <HAL_GPIO_Init+0x350>)
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	3301      	adds	r3, #1
 8001712:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	fa22 f303 	lsr.w	r3, r2, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	f47f ae78 	bne.w	8001414 <HAL_GPIO_Init+0x10>
  }
}
 8001724:	bf00      	nop
 8001726:	bf00      	nop
 8001728:	371c      	adds	r7, #28
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	40021000 	.word	0x40021000
 8001738:	40010000 	.word	0x40010000
 800173c:	48000400 	.word	0x48000400
 8001740:	48000800 	.word	0x48000800
 8001744:	48000c00 	.word	0x48000c00
 8001748:	48001000 	.word	0x48001000
 800174c:	48001400 	.word	0x48001400
 8001750:	48001800 	.word	0x48001800
 8001754:	40010400 	.word	0x40010400

08001758 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	460b      	mov	r3, r1
 8001762:	807b      	strh	r3, [r7, #2]
 8001764:	4613      	mov	r3, r2
 8001766:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001768:	787b      	ldrb	r3, [r7, #1]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800176e:	887a      	ldrh	r2, [r7, #2]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001774:	e002      	b.n	800177c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001776:	887a      	ldrh	r2, [r7, #2]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	460b      	mov	r3, r1
 8001792:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	695b      	ldr	r3, [r3, #20]
 8001798:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800179a:	887a      	ldrh	r2, [r7, #2]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	4013      	ands	r3, r2
 80017a0:	041a      	lsls	r2, r3, #16
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	43d9      	mvns	r1, r3
 80017a6:	887b      	ldrh	r3, [r7, #2]
 80017a8:	400b      	ands	r3, r1
 80017aa:	431a      	orrs	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	619a      	str	r2, [r3, #24]
}
 80017b0:	bf00      	nop
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80017c0:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40007000 	.word	0x40007000

080017d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017e6:	d130      	bne.n	800184a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80017e8:	4b23      	ldr	r3, [pc, #140]	; (8001878 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017f4:	d038      	beq.n	8001868 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017f6:	4b20      	ldr	r3, [pc, #128]	; (8001878 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017fe:	4a1e      	ldr	r2, [pc, #120]	; (8001878 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001800:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001804:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001806:	4b1d      	ldr	r3, [pc, #116]	; (800187c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2232      	movs	r2, #50	; 0x32
 800180c:	fb02 f303 	mul.w	r3, r2, r3
 8001810:	4a1b      	ldr	r2, [pc, #108]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001812:	fba2 2303 	umull	r2, r3, r2, r3
 8001816:	0c9b      	lsrs	r3, r3, #18
 8001818:	3301      	adds	r3, #1
 800181a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800181c:	e002      	b.n	8001824 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	3b01      	subs	r3, #1
 8001822:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001824:	4b14      	ldr	r3, [pc, #80]	; (8001878 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800182c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001830:	d102      	bne.n	8001838 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1f2      	bne.n	800181e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001838:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800183a:	695b      	ldr	r3, [r3, #20]
 800183c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001844:	d110      	bne.n	8001868 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e00f      	b.n	800186a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800184a:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001856:	d007      	beq.n	8001868 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001858:	4b07      	ldr	r3, [pc, #28]	; (8001878 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001860:	4a05      	ldr	r2, [pc, #20]	; (8001878 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001862:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001866:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	40007000 	.word	0x40007000
 800187c:	20000034 	.word	0x20000034
 8001880:	431bde83 	.word	0x431bde83

08001884 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b088      	sub	sp, #32
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e3d8      	b.n	8002048 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001896:	4b97      	ldr	r3, [pc, #604]	; (8001af4 <HAL_RCC_OscConfig+0x270>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 030c 	and.w	r3, r3, #12
 800189e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018a0:	4b94      	ldr	r3, [pc, #592]	; (8001af4 <HAL_RCC_OscConfig+0x270>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	f003 0303 	and.w	r3, r3, #3
 80018a8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0310 	and.w	r3, r3, #16
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f000 80e4 	beq.w	8001a80 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d007      	beq.n	80018ce <HAL_RCC_OscConfig+0x4a>
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	2b0c      	cmp	r3, #12
 80018c2:	f040 808b 	bne.w	80019dc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	f040 8087 	bne.w	80019dc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018ce:	4b89      	ldr	r3, [pc, #548]	; (8001af4 <HAL_RCC_OscConfig+0x270>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d005      	beq.n	80018e6 <HAL_RCC_OscConfig+0x62>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e3b0      	b.n	8002048 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a1a      	ldr	r2, [r3, #32]
 80018ea:	4b82      	ldr	r3, [pc, #520]	; (8001af4 <HAL_RCC_OscConfig+0x270>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0308 	and.w	r3, r3, #8
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d004      	beq.n	8001900 <HAL_RCC_OscConfig+0x7c>
 80018f6:	4b7f      	ldr	r3, [pc, #508]	; (8001af4 <HAL_RCC_OscConfig+0x270>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018fe:	e005      	b.n	800190c <HAL_RCC_OscConfig+0x88>
 8001900:	4b7c      	ldr	r3, [pc, #496]	; (8001af4 <HAL_RCC_OscConfig+0x270>)
 8001902:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001906:	091b      	lsrs	r3, r3, #4
 8001908:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800190c:	4293      	cmp	r3, r2
 800190e:	d223      	bcs.n	8001958 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	4618      	mov	r0, r3
 8001916:	f000 fd43 	bl	80023a0 <RCC_SetFlashLatencyFromMSIRange>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e391      	b.n	8002048 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001924:	4b73      	ldr	r3, [pc, #460]	; (8001af4 <HAL_RCC_OscConfig+0x270>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a72      	ldr	r2, [pc, #456]	; (8001af4 <HAL_RCC_OscConfig+0x270>)
 800192a:	f043 0308 	orr.w	r3, r3, #8
 800192e:	6013      	str	r3, [r2, #0]
 8001930:	4b70      	ldr	r3, [pc, #448]	; (8001af4 <HAL_RCC_OscConfig+0x270>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a1b      	ldr	r3, [r3, #32]
 800193c:	496d      	ldr	r1, [pc, #436]	; (8001af4 <HAL_RCC_OscConfig+0x270>)
 800193e:	4313      	orrs	r3, r2
 8001940:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001942:	4b6c      	ldr	r3, [pc, #432]	; (8001af4 <HAL_RCC_OscConfig+0x270>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	021b      	lsls	r3, r3, #8
 8001950:	4968      	ldr	r1, [pc, #416]	; (8001af4 <HAL_RCC_OscConfig+0x270>)
 8001952:	4313      	orrs	r3, r2
 8001954:	604b      	str	r3, [r1, #4]
 8001956:	e025      	b.n	80019a4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001958:	4b66      	ldr	r3, [pc, #408]	; (8001af4 <HAL_RCC_OscConfig+0x270>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a65      	ldr	r2, [pc, #404]	; (8001af4 <HAL_RCC_OscConfig+0x270>)
 800195e:	f043 0308 	orr.w	r3, r3, #8
 8001962:	6013      	str	r3, [r2, #0]
 8001964:	4b63      	ldr	r3, [pc, #396]	; (8001af4 <HAL_RCC_OscConfig+0x270>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	4960      	ldr	r1, [pc, #384]	; (8001af4 <HAL_RCC_OscConfig+0x270>)
 8001972:	4313      	orrs	r3, r2
 8001974:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001976:	4b5f      	ldr	r3, [pc, #380]	; (8001af4 <HAL_RCC_OscConfig+0x270>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	021b      	lsls	r3, r3, #8
 8001984:	495b      	ldr	r1, [pc, #364]	; (8001af4 <HAL_RCC_OscConfig+0x270>)
 8001986:	4313      	orrs	r3, r2
 8001988:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d109      	bne.n	80019a4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a1b      	ldr	r3, [r3, #32]
 8001994:	4618      	mov	r0, r3
 8001996:	f000 fd03 	bl	80023a0 <RCC_SetFlashLatencyFromMSIRange>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e351      	b.n	8002048 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019a4:	f000 fc38 	bl	8002218 <HAL_RCC_GetSysClockFreq>
 80019a8:	4602      	mov	r2, r0
 80019aa:	4b52      	ldr	r3, [pc, #328]	; (8001af4 <HAL_RCC_OscConfig+0x270>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	091b      	lsrs	r3, r3, #4
 80019b0:	f003 030f 	and.w	r3, r3, #15
 80019b4:	4950      	ldr	r1, [pc, #320]	; (8001af8 <HAL_RCC_OscConfig+0x274>)
 80019b6:	5ccb      	ldrb	r3, [r1, r3]
 80019b8:	f003 031f 	and.w	r3, r3, #31
 80019bc:	fa22 f303 	lsr.w	r3, r2, r3
 80019c0:	4a4e      	ldr	r2, [pc, #312]	; (8001afc <HAL_RCC_OscConfig+0x278>)
 80019c2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80019c4:	4b4e      	ldr	r3, [pc, #312]	; (8001b00 <HAL_RCC_OscConfig+0x27c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff fb2f 	bl	800102c <HAL_InitTick>
 80019ce:	4603      	mov	r3, r0
 80019d0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80019d2:	7bfb      	ldrb	r3, [r7, #15]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d052      	beq.n	8001a7e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
 80019da:	e335      	b.n	8002048 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d032      	beq.n	8001a4a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80019e4:	4b43      	ldr	r3, [pc, #268]	; (8001af4 <HAL_RCC_OscConfig+0x270>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a42      	ldr	r2, [pc, #264]	; (8001af4 <HAL_RCC_OscConfig+0x270>)
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019f0:	f7ff fb6c 	bl	80010cc <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019f8:	f7ff fb68 	bl	80010cc <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e31e      	b.n	8002048 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a0a:	4b3a      	ldr	r3, [pc, #232]	; (8001af4 <HAL_RCC_OscConfig+0x270>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0f0      	beq.n	80019f8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a16:	4b37      	ldr	r3, [pc, #220]	; (8001af4 <HAL_RCC_OscConfig+0x270>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a36      	ldr	r2, [pc, #216]	; (8001af4 <HAL_RCC_OscConfig+0x270>)
 8001a1c:	f043 0308 	orr.w	r3, r3, #8
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	4b34      	ldr	r3, [pc, #208]	; (8001af4 <HAL_RCC_OscConfig+0x270>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
 8001a2e:	4931      	ldr	r1, [pc, #196]	; (8001af4 <HAL_RCC_OscConfig+0x270>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a34:	4b2f      	ldr	r3, [pc, #188]	; (8001af4 <HAL_RCC_OscConfig+0x270>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	69db      	ldr	r3, [r3, #28]
 8001a40:	021b      	lsls	r3, r3, #8
 8001a42:	492c      	ldr	r1, [pc, #176]	; (8001af4 <HAL_RCC_OscConfig+0x270>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	604b      	str	r3, [r1, #4]
 8001a48:	e01a      	b.n	8001a80 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a4a:	4b2a      	ldr	r3, [pc, #168]	; (8001af4 <HAL_RCC_OscConfig+0x270>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a29      	ldr	r2, [pc, #164]	; (8001af4 <HAL_RCC_OscConfig+0x270>)
 8001a50:	f023 0301 	bic.w	r3, r3, #1
 8001a54:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a56:	f7ff fb39 	bl	80010cc <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a5c:	e008      	b.n	8001a70 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a5e:	f7ff fb35 	bl	80010cc <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e2eb      	b.n	8002048 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a70:	4b20      	ldr	r3, [pc, #128]	; (8001af4 <HAL_RCC_OscConfig+0x270>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1f0      	bne.n	8001a5e <HAL_RCC_OscConfig+0x1da>
 8001a7c:	e000      	b.n	8001a80 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a7e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d074      	beq.n	8001b76 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	2b08      	cmp	r3, #8
 8001a90:	d005      	beq.n	8001a9e <HAL_RCC_OscConfig+0x21a>
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	2b0c      	cmp	r3, #12
 8001a96:	d10e      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	2b03      	cmp	r3, #3
 8001a9c:	d10b      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a9e:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <HAL_RCC_OscConfig+0x270>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d064      	beq.n	8001b74 <HAL_RCC_OscConfig+0x2f0>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d160      	bne.n	8001b74 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e2c8      	b.n	8002048 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001abe:	d106      	bne.n	8001ace <HAL_RCC_OscConfig+0x24a>
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <HAL_RCC_OscConfig+0x270>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a0b      	ldr	r2, [pc, #44]	; (8001af4 <HAL_RCC_OscConfig+0x270>)
 8001ac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aca:	6013      	str	r3, [r2, #0]
 8001acc:	e026      	b.n	8001b1c <HAL_RCC_OscConfig+0x298>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ad6:	d115      	bne.n	8001b04 <HAL_RCC_OscConfig+0x280>
 8001ad8:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <HAL_RCC_OscConfig+0x270>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a05      	ldr	r2, [pc, #20]	; (8001af4 <HAL_RCC_OscConfig+0x270>)
 8001ade:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ae2:	6013      	str	r3, [r2, #0]
 8001ae4:	4b03      	ldr	r3, [pc, #12]	; (8001af4 <HAL_RCC_OscConfig+0x270>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a02      	ldr	r2, [pc, #8]	; (8001af4 <HAL_RCC_OscConfig+0x270>)
 8001aea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aee:	6013      	str	r3, [r2, #0]
 8001af0:	e014      	b.n	8001b1c <HAL_RCC_OscConfig+0x298>
 8001af2:	bf00      	nop
 8001af4:	40021000 	.word	0x40021000
 8001af8:	0800477c 	.word	0x0800477c
 8001afc:	20000034 	.word	0x20000034
 8001b00:	20000038 	.word	0x20000038
 8001b04:	4ba0      	ldr	r3, [pc, #640]	; (8001d88 <HAL_RCC_OscConfig+0x504>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a9f      	ldr	r2, [pc, #636]	; (8001d88 <HAL_RCC_OscConfig+0x504>)
 8001b0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b0e:	6013      	str	r3, [r2, #0]
 8001b10:	4b9d      	ldr	r3, [pc, #628]	; (8001d88 <HAL_RCC_OscConfig+0x504>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a9c      	ldr	r2, [pc, #624]	; (8001d88 <HAL_RCC_OscConfig+0x504>)
 8001b16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d013      	beq.n	8001b4c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff fad2 	bl	80010cc <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b2c:	f7ff face 	bl	80010cc <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b64      	cmp	r3, #100	; 0x64
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e284      	b.n	8002048 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b3e:	4b92      	ldr	r3, [pc, #584]	; (8001d88 <HAL_RCC_OscConfig+0x504>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0f0      	beq.n	8001b2c <HAL_RCC_OscConfig+0x2a8>
 8001b4a:	e014      	b.n	8001b76 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4c:	f7ff fabe 	bl	80010cc <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b54:	f7ff faba 	bl	80010cc <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b64      	cmp	r3, #100	; 0x64
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e270      	b.n	8002048 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b66:	4b88      	ldr	r3, [pc, #544]	; (8001d88 <HAL_RCC_OscConfig+0x504>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f0      	bne.n	8001b54 <HAL_RCC_OscConfig+0x2d0>
 8001b72:	e000      	b.n	8001b76 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d060      	beq.n	8001c44 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	d005      	beq.n	8001b94 <HAL_RCC_OscConfig+0x310>
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	2b0c      	cmp	r3, #12
 8001b8c:	d119      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d116      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b94:	4b7c      	ldr	r3, [pc, #496]	; (8001d88 <HAL_RCC_OscConfig+0x504>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d005      	beq.n	8001bac <HAL_RCC_OscConfig+0x328>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e24d      	b.n	8002048 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bac:	4b76      	ldr	r3, [pc, #472]	; (8001d88 <HAL_RCC_OscConfig+0x504>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	061b      	lsls	r3, r3, #24
 8001bba:	4973      	ldr	r1, [pc, #460]	; (8001d88 <HAL_RCC_OscConfig+0x504>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bc0:	e040      	b.n	8001c44 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d023      	beq.n	8001c12 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bca:	4b6f      	ldr	r3, [pc, #444]	; (8001d88 <HAL_RCC_OscConfig+0x504>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a6e      	ldr	r2, [pc, #440]	; (8001d88 <HAL_RCC_OscConfig+0x504>)
 8001bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd6:	f7ff fa79 	bl	80010cc <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bdc:	e008      	b.n	8001bf0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bde:	f7ff fa75 	bl	80010cc <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e22b      	b.n	8002048 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bf0:	4b65      	ldr	r3, [pc, #404]	; (8001d88 <HAL_RCC_OscConfig+0x504>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d0f0      	beq.n	8001bde <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfc:	4b62      	ldr	r3, [pc, #392]	; (8001d88 <HAL_RCC_OscConfig+0x504>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	061b      	lsls	r3, r3, #24
 8001c0a:	495f      	ldr	r1, [pc, #380]	; (8001d88 <HAL_RCC_OscConfig+0x504>)
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	604b      	str	r3, [r1, #4]
 8001c10:	e018      	b.n	8001c44 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c12:	4b5d      	ldr	r3, [pc, #372]	; (8001d88 <HAL_RCC_OscConfig+0x504>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a5c      	ldr	r2, [pc, #368]	; (8001d88 <HAL_RCC_OscConfig+0x504>)
 8001c18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1e:	f7ff fa55 	bl	80010cc <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c24:	e008      	b.n	8001c38 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c26:	f7ff fa51 	bl	80010cc <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e207      	b.n	8002048 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c38:	4b53      	ldr	r3, [pc, #332]	; (8001d88 <HAL_RCC_OscConfig+0x504>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d1f0      	bne.n	8001c26 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0308 	and.w	r3, r3, #8
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d03c      	beq.n	8001cca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	695b      	ldr	r3, [r3, #20]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d01c      	beq.n	8001c92 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c58:	4b4b      	ldr	r3, [pc, #300]	; (8001d88 <HAL_RCC_OscConfig+0x504>)
 8001c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c5e:	4a4a      	ldr	r2, [pc, #296]	; (8001d88 <HAL_RCC_OscConfig+0x504>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c68:	f7ff fa30 	bl	80010cc <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c70:	f7ff fa2c 	bl	80010cc <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e1e2      	b.n	8002048 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c82:	4b41      	ldr	r3, [pc, #260]	; (8001d88 <HAL_RCC_OscConfig+0x504>)
 8001c84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d0ef      	beq.n	8001c70 <HAL_RCC_OscConfig+0x3ec>
 8001c90:	e01b      	b.n	8001cca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c92:	4b3d      	ldr	r3, [pc, #244]	; (8001d88 <HAL_RCC_OscConfig+0x504>)
 8001c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c98:	4a3b      	ldr	r2, [pc, #236]	; (8001d88 <HAL_RCC_OscConfig+0x504>)
 8001c9a:	f023 0301 	bic.w	r3, r3, #1
 8001c9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca2:	f7ff fa13 	bl	80010cc <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001caa:	f7ff fa0f 	bl	80010cc <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e1c5      	b.n	8002048 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cbc:	4b32      	ldr	r3, [pc, #200]	; (8001d88 <HAL_RCC_OscConfig+0x504>)
 8001cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1ef      	bne.n	8001caa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0304 	and.w	r3, r3, #4
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f000 80a6 	beq.w	8001e24 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001cdc:	4b2a      	ldr	r3, [pc, #168]	; (8001d88 <HAL_RCC_OscConfig+0x504>)
 8001cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d10d      	bne.n	8001d04 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce8:	4b27      	ldr	r3, [pc, #156]	; (8001d88 <HAL_RCC_OscConfig+0x504>)
 8001cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cec:	4a26      	ldr	r2, [pc, #152]	; (8001d88 <HAL_RCC_OscConfig+0x504>)
 8001cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf2:	6593      	str	r3, [r2, #88]	; 0x58
 8001cf4:	4b24      	ldr	r3, [pc, #144]	; (8001d88 <HAL_RCC_OscConfig+0x504>)
 8001cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d00:	2301      	movs	r3, #1
 8001d02:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d04:	4b21      	ldr	r3, [pc, #132]	; (8001d8c <HAL_RCC_OscConfig+0x508>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d118      	bne.n	8001d42 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d10:	4b1e      	ldr	r3, [pc, #120]	; (8001d8c <HAL_RCC_OscConfig+0x508>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a1d      	ldr	r2, [pc, #116]	; (8001d8c <HAL_RCC_OscConfig+0x508>)
 8001d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d1c:	f7ff f9d6 	bl	80010cc <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d24:	f7ff f9d2 	bl	80010cc <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e188      	b.n	8002048 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d36:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <HAL_RCC_OscConfig+0x508>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0f0      	beq.n	8001d24 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d108      	bne.n	8001d5c <HAL_RCC_OscConfig+0x4d8>
 8001d4a:	4b0f      	ldr	r3, [pc, #60]	; (8001d88 <HAL_RCC_OscConfig+0x504>)
 8001d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d50:	4a0d      	ldr	r2, [pc, #52]	; (8001d88 <HAL_RCC_OscConfig+0x504>)
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d5a:	e029      	b.n	8001db0 <HAL_RCC_OscConfig+0x52c>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	2b05      	cmp	r3, #5
 8001d62:	d115      	bne.n	8001d90 <HAL_RCC_OscConfig+0x50c>
 8001d64:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <HAL_RCC_OscConfig+0x504>)
 8001d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d6a:	4a07      	ldr	r2, [pc, #28]	; (8001d88 <HAL_RCC_OscConfig+0x504>)
 8001d6c:	f043 0304 	orr.w	r3, r3, #4
 8001d70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d74:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <HAL_RCC_OscConfig+0x504>)
 8001d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d7a:	4a03      	ldr	r2, [pc, #12]	; (8001d88 <HAL_RCC_OscConfig+0x504>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d84:	e014      	b.n	8001db0 <HAL_RCC_OscConfig+0x52c>
 8001d86:	bf00      	nop
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	40007000 	.word	0x40007000
 8001d90:	4b91      	ldr	r3, [pc, #580]	; (8001fd8 <HAL_RCC_OscConfig+0x754>)
 8001d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d96:	4a90      	ldr	r2, [pc, #576]	; (8001fd8 <HAL_RCC_OscConfig+0x754>)
 8001d98:	f023 0301 	bic.w	r3, r3, #1
 8001d9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001da0:	4b8d      	ldr	r3, [pc, #564]	; (8001fd8 <HAL_RCC_OscConfig+0x754>)
 8001da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da6:	4a8c      	ldr	r2, [pc, #560]	; (8001fd8 <HAL_RCC_OscConfig+0x754>)
 8001da8:	f023 0304 	bic.w	r3, r3, #4
 8001dac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d016      	beq.n	8001de6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db8:	f7ff f988 	bl	80010cc <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dbe:	e00a      	b.n	8001dd6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc0:	f7ff f984 	bl	80010cc <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e138      	b.n	8002048 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dd6:	4b80      	ldr	r3, [pc, #512]	; (8001fd8 <HAL_RCC_OscConfig+0x754>)
 8001dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0ed      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x53c>
 8001de4:	e015      	b.n	8001e12 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de6:	f7ff f971 	bl	80010cc <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dec:	e00a      	b.n	8001e04 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dee:	f7ff f96d 	bl	80010cc <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e121      	b.n	8002048 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e04:	4b74      	ldr	r3, [pc, #464]	; (8001fd8 <HAL_RCC_OscConfig+0x754>)
 8001e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1ed      	bne.n	8001dee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e12:	7ffb      	ldrb	r3, [r7, #31]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d105      	bne.n	8001e24 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e18:	4b6f      	ldr	r3, [pc, #444]	; (8001fd8 <HAL_RCC_OscConfig+0x754>)
 8001e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1c:	4a6e      	ldr	r2, [pc, #440]	; (8001fd8 <HAL_RCC_OscConfig+0x754>)
 8001e1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e22:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 810c 	beq.w	8002046 <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	f040 80d4 	bne.w	8001fe0 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e38:	4b67      	ldr	r3, [pc, #412]	; (8001fd8 <HAL_RCC_OscConfig+0x754>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	f003 0203 	and.w	r2, r3, #3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d130      	bne.n	8001eae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	3b01      	subs	r3, #1
 8001e58:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d127      	bne.n	8001eae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e68:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d11f      	bne.n	8001eae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e78:	2a07      	cmp	r2, #7
 8001e7a:	bf14      	ite	ne
 8001e7c:	2201      	movne	r2, #1
 8001e7e:	2200      	moveq	r2, #0
 8001e80:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d113      	bne.n	8001eae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e90:	085b      	lsrs	r3, r3, #1
 8001e92:	3b01      	subs	r3, #1
 8001e94:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d109      	bne.n	8001eae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea4:	085b      	lsrs	r3, r3, #1
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d06e      	beq.n	8001f8c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	2b0c      	cmp	r3, #12
 8001eb2:	d069      	beq.n	8001f88 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001eb4:	4b48      	ldr	r3, [pc, #288]	; (8001fd8 <HAL_RCC_OscConfig+0x754>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d105      	bne.n	8001ecc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001ec0:	4b45      	ldr	r3, [pc, #276]	; (8001fd8 <HAL_RCC_OscConfig+0x754>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e0bb      	b.n	8002048 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ed0:	4b41      	ldr	r3, [pc, #260]	; (8001fd8 <HAL_RCC_OscConfig+0x754>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a40      	ldr	r2, [pc, #256]	; (8001fd8 <HAL_RCC_OscConfig+0x754>)
 8001ed6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001eda:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001edc:	f7ff f8f6 	bl	80010cc <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee4:	f7ff f8f2 	bl	80010cc <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e0a8      	b.n	8002048 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ef6:	4b38      	ldr	r3, [pc, #224]	; (8001fd8 <HAL_RCC_OscConfig+0x754>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f0      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f02:	4b35      	ldr	r3, [pc, #212]	; (8001fd8 <HAL_RCC_OscConfig+0x754>)
 8001f04:	68da      	ldr	r2, [r3, #12]
 8001f06:	4b35      	ldr	r3, [pc, #212]	; (8001fdc <HAL_RCC_OscConfig+0x758>)
 8001f08:	4013      	ands	r3, r2
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f12:	3a01      	subs	r2, #1
 8001f14:	0112      	lsls	r2, r2, #4
 8001f16:	4311      	orrs	r1, r2
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f1c:	0212      	lsls	r2, r2, #8
 8001f1e:	4311      	orrs	r1, r2
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f24:	0852      	lsrs	r2, r2, #1
 8001f26:	3a01      	subs	r2, #1
 8001f28:	0552      	lsls	r2, r2, #21
 8001f2a:	4311      	orrs	r1, r2
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f30:	0852      	lsrs	r2, r2, #1
 8001f32:	3a01      	subs	r2, #1
 8001f34:	0652      	lsls	r2, r2, #25
 8001f36:	4311      	orrs	r1, r2
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f3c:	0912      	lsrs	r2, r2, #4
 8001f3e:	0452      	lsls	r2, r2, #17
 8001f40:	430a      	orrs	r2, r1
 8001f42:	4925      	ldr	r1, [pc, #148]	; (8001fd8 <HAL_RCC_OscConfig+0x754>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f48:	4b23      	ldr	r3, [pc, #140]	; (8001fd8 <HAL_RCC_OscConfig+0x754>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a22      	ldr	r2, [pc, #136]	; (8001fd8 <HAL_RCC_OscConfig+0x754>)
 8001f4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f52:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f54:	4b20      	ldr	r3, [pc, #128]	; (8001fd8 <HAL_RCC_OscConfig+0x754>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	4a1f      	ldr	r2, [pc, #124]	; (8001fd8 <HAL_RCC_OscConfig+0x754>)
 8001f5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f60:	f7ff f8b4 	bl	80010cc <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f68:	f7ff f8b0 	bl	80010cc <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e066      	b.n	8002048 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f7a:	4b17      	ldr	r3, [pc, #92]	; (8001fd8 <HAL_RCC_OscConfig+0x754>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0f0      	beq.n	8001f68 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f86:	e05e      	b.n	8002046 <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e05d      	b.n	8002048 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f8c:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <HAL_RCC_OscConfig+0x754>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d156      	bne.n	8002046 <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f98:	4b0f      	ldr	r3, [pc, #60]	; (8001fd8 <HAL_RCC_OscConfig+0x754>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a0e      	ldr	r2, [pc, #56]	; (8001fd8 <HAL_RCC_OscConfig+0x754>)
 8001f9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fa2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <HAL_RCC_OscConfig+0x754>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	4a0b      	ldr	r2, [pc, #44]	; (8001fd8 <HAL_RCC_OscConfig+0x754>)
 8001faa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fb0:	f7ff f88c 	bl	80010cc <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb8:	f7ff f888 	bl	80010cc <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e03e      	b.n	8002048 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fca:	4b03      	ldr	r3, [pc, #12]	; (8001fd8 <HAL_RCC_OscConfig+0x754>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0f0      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x734>
 8001fd6:	e036      	b.n	8002046 <HAL_RCC_OscConfig+0x7c2>
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	2b0c      	cmp	r3, #12
 8001fe4:	d02d      	beq.n	8002042 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe6:	4b1a      	ldr	r3, [pc, #104]	; (8002050 <HAL_RCC_OscConfig+0x7cc>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a19      	ldr	r2, [pc, #100]	; (8002050 <HAL_RCC_OscConfig+0x7cc>)
 8001fec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ff0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001ff2:	4b17      	ldr	r3, [pc, #92]	; (8002050 <HAL_RCC_OscConfig+0x7cc>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d105      	bne.n	800200a <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ffe:	4b14      	ldr	r3, [pc, #80]	; (8002050 <HAL_RCC_OscConfig+0x7cc>)
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	4a13      	ldr	r2, [pc, #76]	; (8002050 <HAL_RCC_OscConfig+0x7cc>)
 8002004:	f023 0303 	bic.w	r3, r3, #3
 8002008:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800200a:	4b11      	ldr	r3, [pc, #68]	; (8002050 <HAL_RCC_OscConfig+0x7cc>)
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	4a10      	ldr	r2, [pc, #64]	; (8002050 <HAL_RCC_OscConfig+0x7cc>)
 8002010:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002018:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201a:	f7ff f857 	bl	80010cc <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002020:	e008      	b.n	8002034 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002022:	f7ff f853 	bl	80010cc <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e009      	b.n	8002048 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002034:	4b06      	ldr	r3, [pc, #24]	; (8002050 <HAL_RCC_OscConfig+0x7cc>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1f0      	bne.n	8002022 <HAL_RCC_OscConfig+0x79e>
 8002040:	e001      	b.n	8002046 <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e000      	b.n	8002048 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3720      	adds	r7, #32
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40021000 	.word	0x40021000

08002054 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e0c8      	b.n	80021fa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002068:	4b66      	ldr	r3, [pc, #408]	; (8002204 <HAL_RCC_ClockConfig+0x1b0>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	429a      	cmp	r2, r3
 8002074:	d910      	bls.n	8002098 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002076:	4b63      	ldr	r3, [pc, #396]	; (8002204 <HAL_RCC_ClockConfig+0x1b0>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f023 0207 	bic.w	r2, r3, #7
 800207e:	4961      	ldr	r1, [pc, #388]	; (8002204 <HAL_RCC_ClockConfig+0x1b0>)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	4313      	orrs	r3, r2
 8002084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002086:	4b5f      	ldr	r3, [pc, #380]	; (8002204 <HAL_RCC_ClockConfig+0x1b0>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	429a      	cmp	r2, r3
 8002092:	d001      	beq.n	8002098 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e0b0      	b.n	80021fa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d04c      	beq.n	800213e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2b03      	cmp	r3, #3
 80020aa:	d107      	bne.n	80020bc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ac:	4b56      	ldr	r3, [pc, #344]	; (8002208 <HAL_RCC_ClockConfig+0x1b4>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d121      	bne.n	80020fc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e09e      	b.n	80021fa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d107      	bne.n	80020d4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020c4:	4b50      	ldr	r3, [pc, #320]	; (8002208 <HAL_RCC_ClockConfig+0x1b4>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d115      	bne.n	80020fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e092      	b.n	80021fa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d107      	bne.n	80020ec <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020dc:	4b4a      	ldr	r3, [pc, #296]	; (8002208 <HAL_RCC_ClockConfig+0x1b4>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d109      	bne.n	80020fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e086      	b.n	80021fa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020ec:	4b46      	ldr	r3, [pc, #280]	; (8002208 <HAL_RCC_ClockConfig+0x1b4>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d101      	bne.n	80020fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e07e      	b.n	80021fa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020fc:	4b42      	ldr	r3, [pc, #264]	; (8002208 <HAL_RCC_ClockConfig+0x1b4>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f023 0203 	bic.w	r2, r3, #3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	493f      	ldr	r1, [pc, #252]	; (8002208 <HAL_RCC_ClockConfig+0x1b4>)
 800210a:	4313      	orrs	r3, r2
 800210c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800210e:	f7fe ffdd 	bl	80010cc <HAL_GetTick>
 8002112:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002114:	e00a      	b.n	800212c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002116:	f7fe ffd9 	bl	80010cc <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	f241 3288 	movw	r2, #5000	; 0x1388
 8002124:	4293      	cmp	r3, r2
 8002126:	d901      	bls.n	800212c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e066      	b.n	80021fa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800212c:	4b36      	ldr	r3, [pc, #216]	; (8002208 <HAL_RCC_ClockConfig+0x1b4>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 020c 	and.w	r2, r3, #12
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	429a      	cmp	r2, r3
 800213c:	d1eb      	bne.n	8002116 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d008      	beq.n	800215c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800214a:	4b2f      	ldr	r3, [pc, #188]	; (8002208 <HAL_RCC_ClockConfig+0x1b4>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	492c      	ldr	r1, [pc, #176]	; (8002208 <HAL_RCC_ClockConfig+0x1b4>)
 8002158:	4313      	orrs	r3, r2
 800215a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800215c:	4b29      	ldr	r3, [pc, #164]	; (8002204 <HAL_RCC_ClockConfig+0x1b0>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d210      	bcs.n	800218c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216a:	4b26      	ldr	r3, [pc, #152]	; (8002204 <HAL_RCC_ClockConfig+0x1b0>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f023 0207 	bic.w	r2, r3, #7
 8002172:	4924      	ldr	r1, [pc, #144]	; (8002204 <HAL_RCC_ClockConfig+0x1b0>)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	4313      	orrs	r3, r2
 8002178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800217a:	4b22      	ldr	r3, [pc, #136]	; (8002204 <HAL_RCC_ClockConfig+0x1b0>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	429a      	cmp	r2, r3
 8002186:	d001      	beq.n	800218c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e036      	b.n	80021fa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	2b00      	cmp	r3, #0
 8002196:	d008      	beq.n	80021aa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002198:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <HAL_RCC_ClockConfig+0x1b4>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	4918      	ldr	r1, [pc, #96]	; (8002208 <HAL_RCC_ClockConfig+0x1b4>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0308 	and.w	r3, r3, #8
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d009      	beq.n	80021ca <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021b6:	4b14      	ldr	r3, [pc, #80]	; (8002208 <HAL_RCC_ClockConfig+0x1b4>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	4910      	ldr	r1, [pc, #64]	; (8002208 <HAL_RCC_ClockConfig+0x1b4>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021ca:	f000 f825 	bl	8002218 <HAL_RCC_GetSysClockFreq>
 80021ce:	4602      	mov	r2, r0
 80021d0:	4b0d      	ldr	r3, [pc, #52]	; (8002208 <HAL_RCC_ClockConfig+0x1b4>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	091b      	lsrs	r3, r3, #4
 80021d6:	f003 030f 	and.w	r3, r3, #15
 80021da:	490c      	ldr	r1, [pc, #48]	; (800220c <HAL_RCC_ClockConfig+0x1b8>)
 80021dc:	5ccb      	ldrb	r3, [r1, r3]
 80021de:	f003 031f 	and.w	r3, r3, #31
 80021e2:	fa22 f303 	lsr.w	r3, r2, r3
 80021e6:	4a0a      	ldr	r2, [pc, #40]	; (8002210 <HAL_RCC_ClockConfig+0x1bc>)
 80021e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021ea:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <HAL_RCC_ClockConfig+0x1c0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7fe ff1c 	bl	800102c <HAL_InitTick>
 80021f4:	4603      	mov	r3, r0
 80021f6:	72fb      	strb	r3, [r7, #11]

  return status;
 80021f8:	7afb      	ldrb	r3, [r7, #11]
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40022000 	.word	0x40022000
 8002208:	40021000 	.word	0x40021000
 800220c:	0800477c 	.word	0x0800477c
 8002210:	20000034 	.word	0x20000034
 8002214:	20000038 	.word	0x20000038

08002218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002218:	b480      	push	{r7}
 800221a:	b089      	sub	sp, #36	; 0x24
 800221c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
 8002222:	2300      	movs	r3, #0
 8002224:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002226:	4b3e      	ldr	r3, [pc, #248]	; (8002320 <HAL_RCC_GetSysClockFreq+0x108>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 030c 	and.w	r3, r3, #12
 800222e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002230:	4b3b      	ldr	r3, [pc, #236]	; (8002320 <HAL_RCC_GetSysClockFreq+0x108>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	f003 0303 	and.w	r3, r3, #3
 8002238:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d005      	beq.n	800224c <HAL_RCC_GetSysClockFreq+0x34>
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	2b0c      	cmp	r3, #12
 8002244:	d121      	bne.n	800228a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d11e      	bne.n	800228a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800224c:	4b34      	ldr	r3, [pc, #208]	; (8002320 <HAL_RCC_GetSysClockFreq+0x108>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0308 	and.w	r3, r3, #8
 8002254:	2b00      	cmp	r3, #0
 8002256:	d107      	bne.n	8002268 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002258:	4b31      	ldr	r3, [pc, #196]	; (8002320 <HAL_RCC_GetSysClockFreq+0x108>)
 800225a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800225e:	0a1b      	lsrs	r3, r3, #8
 8002260:	f003 030f 	and.w	r3, r3, #15
 8002264:	61fb      	str	r3, [r7, #28]
 8002266:	e005      	b.n	8002274 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002268:	4b2d      	ldr	r3, [pc, #180]	; (8002320 <HAL_RCC_GetSysClockFreq+0x108>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	091b      	lsrs	r3, r3, #4
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002274:	4a2b      	ldr	r2, [pc, #172]	; (8002324 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d10d      	bne.n	80022a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002288:	e00a      	b.n	80022a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	2b04      	cmp	r3, #4
 800228e:	d102      	bne.n	8002296 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002290:	4b25      	ldr	r3, [pc, #148]	; (8002328 <HAL_RCC_GetSysClockFreq+0x110>)
 8002292:	61bb      	str	r3, [r7, #24]
 8002294:	e004      	b.n	80022a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	2b08      	cmp	r3, #8
 800229a:	d101      	bne.n	80022a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800229c:	4b23      	ldr	r3, [pc, #140]	; (800232c <HAL_RCC_GetSysClockFreq+0x114>)
 800229e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	2b0c      	cmp	r3, #12
 80022a4:	d134      	bne.n	8002310 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022a6:	4b1e      	ldr	r3, [pc, #120]	; (8002320 <HAL_RCC_GetSysClockFreq+0x108>)
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	f003 0303 	and.w	r3, r3, #3
 80022ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d003      	beq.n	80022be <HAL_RCC_GetSysClockFreq+0xa6>
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	2b03      	cmp	r3, #3
 80022ba:	d003      	beq.n	80022c4 <HAL_RCC_GetSysClockFreq+0xac>
 80022bc:	e005      	b.n	80022ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80022be:	4b1a      	ldr	r3, [pc, #104]	; (8002328 <HAL_RCC_GetSysClockFreq+0x110>)
 80022c0:	617b      	str	r3, [r7, #20]
      break;
 80022c2:	e005      	b.n	80022d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80022c4:	4b19      	ldr	r3, [pc, #100]	; (800232c <HAL_RCC_GetSysClockFreq+0x114>)
 80022c6:	617b      	str	r3, [r7, #20]
      break;
 80022c8:	e002      	b.n	80022d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	617b      	str	r3, [r7, #20]
      break;
 80022ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022d0:	4b13      	ldr	r3, [pc, #76]	; (8002320 <HAL_RCC_GetSysClockFreq+0x108>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	091b      	lsrs	r3, r3, #4
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	3301      	adds	r3, #1
 80022dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022de:	4b10      	ldr	r3, [pc, #64]	; (8002320 <HAL_RCC_GetSysClockFreq+0x108>)
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	0a1b      	lsrs	r3, r3, #8
 80022e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	fb03 f202 	mul.w	r2, r3, r2
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022f6:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <HAL_RCC_GetSysClockFreq+0x108>)
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	0e5b      	lsrs	r3, r3, #25
 80022fc:	f003 0303 	and.w	r3, r3, #3
 8002300:	3301      	adds	r3, #1
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	fbb2 f3f3 	udiv	r3, r2, r3
 800230e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002310:	69bb      	ldr	r3, [r7, #24]
}
 8002312:	4618      	mov	r0, r3
 8002314:	3724      	adds	r7, #36	; 0x24
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	40021000 	.word	0x40021000
 8002324:	08004794 	.word	0x08004794
 8002328:	00f42400 	.word	0x00f42400
 800232c:	007a1200 	.word	0x007a1200

08002330 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002334:	4b03      	ldr	r3, [pc, #12]	; (8002344 <HAL_RCC_GetHCLKFreq+0x14>)
 8002336:	681b      	ldr	r3, [r3, #0]
}
 8002338:	4618      	mov	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	20000034 	.word	0x20000034

08002348 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800234c:	f7ff fff0 	bl	8002330 <HAL_RCC_GetHCLKFreq>
 8002350:	4602      	mov	r2, r0
 8002352:	4b06      	ldr	r3, [pc, #24]	; (800236c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	0a1b      	lsrs	r3, r3, #8
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	4904      	ldr	r1, [pc, #16]	; (8002370 <HAL_RCC_GetPCLK1Freq+0x28>)
 800235e:	5ccb      	ldrb	r3, [r1, r3]
 8002360:	f003 031f 	and.w	r3, r3, #31
 8002364:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002368:	4618      	mov	r0, r3
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40021000 	.word	0x40021000
 8002370:	0800478c 	.word	0x0800478c

08002374 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002378:	f7ff ffda 	bl	8002330 <HAL_RCC_GetHCLKFreq>
 800237c:	4602      	mov	r2, r0
 800237e:	4b06      	ldr	r3, [pc, #24]	; (8002398 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	0adb      	lsrs	r3, r3, #11
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	4904      	ldr	r1, [pc, #16]	; (800239c <HAL_RCC_GetPCLK2Freq+0x28>)
 800238a:	5ccb      	ldrb	r3, [r1, r3]
 800238c:	f003 031f 	and.w	r3, r3, #31
 8002390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002394:	4618      	mov	r0, r3
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40021000 	.word	0x40021000
 800239c:	0800478c 	.word	0x0800478c

080023a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80023a8:	2300      	movs	r3, #0
 80023aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80023ac:	4b2a      	ldr	r3, [pc, #168]	; (8002458 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80023b8:	f7ff fa00 	bl	80017bc <HAL_PWREx_GetVoltageRange>
 80023bc:	6178      	str	r0, [r7, #20]
 80023be:	e014      	b.n	80023ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80023c0:	4b25      	ldr	r3, [pc, #148]	; (8002458 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c4:	4a24      	ldr	r2, [pc, #144]	; (8002458 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ca:	6593      	str	r3, [r2, #88]	; 0x58
 80023cc:	4b22      	ldr	r3, [pc, #136]	; (8002458 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80023d8:	f7ff f9f0 	bl	80017bc <HAL_PWREx_GetVoltageRange>
 80023dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023de:	4b1e      	ldr	r3, [pc, #120]	; (8002458 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e2:	4a1d      	ldr	r2, [pc, #116]	; (8002458 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023f0:	d10b      	bne.n	800240a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b80      	cmp	r3, #128	; 0x80
 80023f6:	d919      	bls.n	800242c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2ba0      	cmp	r3, #160	; 0xa0
 80023fc:	d902      	bls.n	8002404 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023fe:	2302      	movs	r3, #2
 8002400:	613b      	str	r3, [r7, #16]
 8002402:	e013      	b.n	800242c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002404:	2301      	movs	r3, #1
 8002406:	613b      	str	r3, [r7, #16]
 8002408:	e010      	b.n	800242c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b80      	cmp	r3, #128	; 0x80
 800240e:	d902      	bls.n	8002416 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002410:	2303      	movs	r3, #3
 8002412:	613b      	str	r3, [r7, #16]
 8002414:	e00a      	b.n	800242c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b80      	cmp	r3, #128	; 0x80
 800241a:	d102      	bne.n	8002422 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800241c:	2302      	movs	r3, #2
 800241e:	613b      	str	r3, [r7, #16]
 8002420:	e004      	b.n	800242c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b70      	cmp	r3, #112	; 0x70
 8002426:	d101      	bne.n	800242c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002428:	2301      	movs	r3, #1
 800242a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800242c:	4b0b      	ldr	r3, [pc, #44]	; (800245c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f023 0207 	bic.w	r2, r3, #7
 8002434:	4909      	ldr	r1, [pc, #36]	; (800245c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4313      	orrs	r3, r2
 800243a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800243c:	4b07      	ldr	r3, [pc, #28]	; (800245c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	429a      	cmp	r2, r3
 8002448:	d001      	beq.n	800244e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40021000 	.word	0x40021000
 800245c:	40022000 	.word	0x40022000

08002460 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002468:	2300      	movs	r3, #0
 800246a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800246c:	2300      	movs	r3, #0
 800246e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002478:	2b00      	cmp	r3, #0
 800247a:	d041      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002480:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002484:	d02a      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002486:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800248a:	d824      	bhi.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800248c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002490:	d008      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002492:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002496:	d81e      	bhi.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00a      	beq.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800249c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024a0:	d010      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80024a2:	e018      	b.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024a4:	4b86      	ldr	r3, [pc, #536]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	4a85      	ldr	r2, [pc, #532]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024b0:	e015      	b.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	3304      	adds	r3, #4
 80024b6:	2100      	movs	r1, #0
 80024b8:	4618      	mov	r0, r3
 80024ba:	f000 fabb 	bl	8002a34 <RCCEx_PLLSAI1_Config>
 80024be:	4603      	mov	r3, r0
 80024c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024c2:	e00c      	b.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3320      	adds	r3, #32
 80024c8:	2100      	movs	r1, #0
 80024ca:	4618      	mov	r0, r3
 80024cc:	f000 fba6 	bl	8002c1c <RCCEx_PLLSAI2_Config>
 80024d0:	4603      	mov	r3, r0
 80024d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024d4:	e003      	b.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	74fb      	strb	r3, [r7, #19]
      break;
 80024da:	e000      	b.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80024dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024de:	7cfb      	ldrb	r3, [r7, #19]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10b      	bne.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024e4:	4b76      	ldr	r3, [pc, #472]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024f2:	4973      	ldr	r1, [pc, #460]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80024fa:	e001      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024fc:	7cfb      	ldrb	r3, [r7, #19]
 80024fe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d041      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002510:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002514:	d02a      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002516:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800251a:	d824      	bhi.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800251c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002520:	d008      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002522:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002526:	d81e      	bhi.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00a      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800252c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002530:	d010      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002532:	e018      	b.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002534:	4b62      	ldr	r3, [pc, #392]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	4a61      	ldr	r2, [pc, #388]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800253a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800253e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002540:	e015      	b.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3304      	adds	r3, #4
 8002546:	2100      	movs	r1, #0
 8002548:	4618      	mov	r0, r3
 800254a:	f000 fa73 	bl	8002a34 <RCCEx_PLLSAI1_Config>
 800254e:	4603      	mov	r3, r0
 8002550:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002552:	e00c      	b.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3320      	adds	r3, #32
 8002558:	2100      	movs	r1, #0
 800255a:	4618      	mov	r0, r3
 800255c:	f000 fb5e 	bl	8002c1c <RCCEx_PLLSAI2_Config>
 8002560:	4603      	mov	r3, r0
 8002562:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002564:	e003      	b.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	74fb      	strb	r3, [r7, #19]
      break;
 800256a:	e000      	b.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800256c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800256e:	7cfb      	ldrb	r3, [r7, #19]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10b      	bne.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002574:	4b52      	ldr	r3, [pc, #328]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002582:	494f      	ldr	r1, [pc, #316]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800258a:	e001      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800258c:	7cfb      	ldrb	r3, [r7, #19]
 800258e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 80a0 	beq.w	80026de <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800259e:	2300      	movs	r3, #0
 80025a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025a2:	4b47      	ldr	r3, [pc, #284]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80025ae:	2301      	movs	r3, #1
 80025b0:	e000      	b.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80025b2:	2300      	movs	r3, #0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00d      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b8:	4b41      	ldr	r3, [pc, #260]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025bc:	4a40      	ldr	r2, [pc, #256]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c2:	6593      	str	r3, [r2, #88]	; 0x58
 80025c4:	4b3e      	ldr	r3, [pc, #248]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025cc:	60bb      	str	r3, [r7, #8]
 80025ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025d0:	2301      	movs	r3, #1
 80025d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025d4:	4b3b      	ldr	r3, [pc, #236]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a3a      	ldr	r2, [pc, #232]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025e0:	f7fe fd74 	bl	80010cc <HAL_GetTick>
 80025e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025e6:	e009      	b.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e8:	f7fe fd70 	bl	80010cc <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d902      	bls.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	74fb      	strb	r3, [r7, #19]
        break;
 80025fa:	e005      	b.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025fc:	4b31      	ldr	r3, [pc, #196]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0ef      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002608:	7cfb      	ldrb	r3, [r7, #19]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d15c      	bne.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800260e:	4b2c      	ldr	r3, [pc, #176]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002614:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002618:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d01f      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	429a      	cmp	r2, r3
 800262a:	d019      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800262c:	4b24      	ldr	r3, [pc, #144]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800262e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002632:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002636:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002638:	4b21      	ldr	r3, [pc, #132]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800263a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263e:	4a20      	ldr	r2, [pc, #128]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002644:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002648:	4b1d      	ldr	r3, [pc, #116]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800264a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800264e:	4a1c      	ldr	r2, [pc, #112]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002650:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002654:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002658:	4a19      	ldr	r2, [pc, #100]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d016      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266a:	f7fe fd2f 	bl	80010cc <HAL_GetTick>
 800266e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002670:	e00b      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002672:	f7fe fd2b 	bl	80010cc <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002680:	4293      	cmp	r3, r2
 8002682:	d902      	bls.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	74fb      	strb	r3, [r7, #19]
            break;
 8002688:	e006      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800268a:	4b0d      	ldr	r3, [pc, #52]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800268c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0ec      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002698:	7cfb      	ldrb	r3, [r7, #19]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10c      	bne.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800269e:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026ae:	4904      	ldr	r1, [pc, #16]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80026b6:	e009      	b.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026b8:	7cfb      	ldrb	r3, [r7, #19]
 80026ba:	74bb      	strb	r3, [r7, #18]
 80026bc:	e006      	b.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80026be:	bf00      	nop
 80026c0:	40021000 	.word	0x40021000
 80026c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026c8:	7cfb      	ldrb	r3, [r7, #19]
 80026ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026cc:	7c7b      	ldrb	r3, [r7, #17]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d105      	bne.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026d2:	4b9e      	ldr	r3, [pc, #632]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d6:	4a9d      	ldr	r2, [pc, #628]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00a      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026ea:	4b98      	ldr	r3, [pc, #608]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f0:	f023 0203 	bic.w	r2, r3, #3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f8:	4994      	ldr	r1, [pc, #592]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00a      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800270c:	4b8f      	ldr	r3, [pc, #572]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800270e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002712:	f023 020c 	bic.w	r2, r3, #12
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800271a:	498c      	ldr	r1, [pc, #560]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800271c:	4313      	orrs	r3, r2
 800271e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0304 	and.w	r3, r3, #4
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00a      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800272e:	4b87      	ldr	r3, [pc, #540]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002734:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273c:	4983      	ldr	r1, [pc, #524]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273e:	4313      	orrs	r3, r2
 8002740:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0308 	and.w	r3, r3, #8
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00a      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002750:	4b7e      	ldr	r3, [pc, #504]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002756:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275e:	497b      	ldr	r1, [pc, #492]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002760:	4313      	orrs	r3, r2
 8002762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0310 	and.w	r3, r3, #16
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00a      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002772:	4b76      	ldr	r3, [pc, #472]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002778:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002780:	4972      	ldr	r1, [pc, #456]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002782:	4313      	orrs	r3, r2
 8002784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0320 	and.w	r3, r3, #32
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00a      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002794:	4b6d      	ldr	r3, [pc, #436]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a2:	496a      	ldr	r1, [pc, #424]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00a      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027b6:	4b65      	ldr	r3, [pc, #404]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c4:	4961      	ldr	r1, [pc, #388]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00a      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80027d8:	4b5c      	ldr	r3, [pc, #368]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027e6:	4959      	ldr	r1, [pc, #356]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00a      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027fa:	4b54      	ldr	r3, [pc, #336]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002800:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002808:	4950      	ldr	r1, [pc, #320]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800280a:	4313      	orrs	r3, r2
 800280c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00a      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800281c:	4b4b      	ldr	r3, [pc, #300]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002822:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282a:	4948      	ldr	r1, [pc, #288]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282c:	4313      	orrs	r3, r2
 800282e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00a      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800283e:	4b43      	ldr	r3, [pc, #268]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002844:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284c:	493f      	ldr	r1, [pc, #252]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284e:	4313      	orrs	r3, r2
 8002850:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d028      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002860:	4b3a      	ldr	r3, [pc, #232]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002866:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800286e:	4937      	ldr	r1, [pc, #220]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002870:	4313      	orrs	r3, r2
 8002872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800287a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800287e:	d106      	bne.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002880:	4b32      	ldr	r3, [pc, #200]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	4a31      	ldr	r2, [pc, #196]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002886:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800288a:	60d3      	str	r3, [r2, #12]
 800288c:	e011      	b.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002892:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002896:	d10c      	bne.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3304      	adds	r3, #4
 800289c:	2101      	movs	r1, #1
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 f8c8 	bl	8002a34 <RCCEx_PLLSAI1_Config>
 80028a4:	4603      	mov	r3, r0
 80028a6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80028a8:	7cfb      	ldrb	r3, [r7, #19]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80028ae:	7cfb      	ldrb	r3, [r7, #19]
 80028b0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d028      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80028be:	4b23      	ldr	r3, [pc, #140]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028cc:	491f      	ldr	r1, [pc, #124]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028dc:	d106      	bne.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028de:	4b1b      	ldr	r3, [pc, #108]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	4a1a      	ldr	r2, [pc, #104]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028e8:	60d3      	str	r3, [r2, #12]
 80028ea:	e011      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028f4:	d10c      	bne.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	3304      	adds	r3, #4
 80028fa:	2101      	movs	r1, #1
 80028fc:	4618      	mov	r0, r3
 80028fe:	f000 f899 	bl	8002a34 <RCCEx_PLLSAI1_Config>
 8002902:	4603      	mov	r3, r0
 8002904:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002906:	7cfb      	ldrb	r3, [r7, #19]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800290c:	7cfb      	ldrb	r3, [r7, #19]
 800290e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d02b      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800291c:	4b0b      	ldr	r3, [pc, #44]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800291e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002922:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800292a:	4908      	ldr	r1, [pc, #32]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800292c:	4313      	orrs	r3, r2
 800292e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002936:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800293a:	d109      	bne.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800293c:	4b03      	ldr	r3, [pc, #12]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	4a02      	ldr	r2, [pc, #8]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002942:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002946:	60d3      	str	r3, [r2, #12]
 8002948:	e014      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800294a:	bf00      	nop
 800294c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002954:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002958:	d10c      	bne.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	3304      	adds	r3, #4
 800295e:	2101      	movs	r1, #1
 8002960:	4618      	mov	r0, r3
 8002962:	f000 f867 	bl	8002a34 <RCCEx_PLLSAI1_Config>
 8002966:	4603      	mov	r3, r0
 8002968:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800296a:	7cfb      	ldrb	r3, [r7, #19]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002970:	7cfb      	ldrb	r3, [r7, #19]
 8002972:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d02f      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002980:	4b2b      	ldr	r3, [pc, #172]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002986:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800298e:	4928      	ldr	r1, [pc, #160]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800299a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800299e:	d10d      	bne.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3304      	adds	r3, #4
 80029a4:	2102      	movs	r1, #2
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 f844 	bl	8002a34 <RCCEx_PLLSAI1_Config>
 80029ac:	4603      	mov	r3, r0
 80029ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029b0:	7cfb      	ldrb	r3, [r7, #19]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d014      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80029b6:	7cfb      	ldrb	r3, [r7, #19]
 80029b8:	74bb      	strb	r3, [r7, #18]
 80029ba:	e011      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029c4:	d10c      	bne.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	3320      	adds	r3, #32
 80029ca:	2102      	movs	r1, #2
 80029cc:	4618      	mov	r0, r3
 80029ce:	f000 f925 	bl	8002c1c <RCCEx_PLLSAI2_Config>
 80029d2:	4603      	mov	r3, r0
 80029d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029d6:	7cfb      	ldrb	r3, [r7, #19]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80029dc:	7cfb      	ldrb	r3, [r7, #19]
 80029de:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00a      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80029ec:	4b10      	ldr	r3, [pc, #64]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029fa:	490d      	ldr	r1, [pc, #52]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00b      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a0e:	4b08      	ldr	r3, [pc, #32]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a14:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a1e:	4904      	ldr	r1, [pc, #16]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a26:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3718      	adds	r7, #24
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40021000 	.word	0x40021000

08002a34 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a42:	4b75      	ldr	r3, [pc, #468]	; (8002c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	f003 0303 	and.w	r3, r3, #3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d018      	beq.n	8002a80 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a4e:	4b72      	ldr	r3, [pc, #456]	; (8002c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	f003 0203 	and.w	r2, r3, #3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d10d      	bne.n	8002a7a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
       ||
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d009      	beq.n	8002a7a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002a66:	4b6c      	ldr	r3, [pc, #432]	; (8002c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	091b      	lsrs	r3, r3, #4
 8002a6c:	f003 0307 	and.w	r3, r3, #7
 8002a70:	1c5a      	adds	r2, r3, #1
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
       ||
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d047      	beq.n	8002b0a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	73fb      	strb	r3, [r7, #15]
 8002a7e:	e044      	b.n	8002b0a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2b03      	cmp	r3, #3
 8002a86:	d018      	beq.n	8002aba <RCCEx_PLLSAI1_Config+0x86>
 8002a88:	2b03      	cmp	r3, #3
 8002a8a:	d825      	bhi.n	8002ad8 <RCCEx_PLLSAI1_Config+0xa4>
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d002      	beq.n	8002a96 <RCCEx_PLLSAI1_Config+0x62>
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d009      	beq.n	8002aa8 <RCCEx_PLLSAI1_Config+0x74>
 8002a94:	e020      	b.n	8002ad8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a96:	4b60      	ldr	r3, [pc, #384]	; (8002c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d11d      	bne.n	8002ade <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aa6:	e01a      	b.n	8002ade <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002aa8:	4b5b      	ldr	r3, [pc, #364]	; (8002c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d116      	bne.n	8002ae2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ab8:	e013      	b.n	8002ae2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002aba:	4b57      	ldr	r3, [pc, #348]	; (8002c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10f      	bne.n	8002ae6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ac6:	4b54      	ldr	r3, [pc, #336]	; (8002c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d109      	bne.n	8002ae6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ad6:	e006      	b.n	8002ae6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	73fb      	strb	r3, [r7, #15]
      break;
 8002adc:	e004      	b.n	8002ae8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ade:	bf00      	nop
 8002ae0:	e002      	b.n	8002ae8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ae2:	bf00      	nop
 8002ae4:	e000      	b.n	8002ae8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ae6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ae8:	7bfb      	ldrb	r3, [r7, #15]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10d      	bne.n	8002b0a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002aee:	4b4a      	ldr	r3, [pc, #296]	; (8002c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6819      	ldr	r1, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	3b01      	subs	r3, #1
 8002b00:	011b      	lsls	r3, r3, #4
 8002b02:	430b      	orrs	r3, r1
 8002b04:	4944      	ldr	r1, [pc, #272]	; (8002c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d17d      	bne.n	8002c0c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b10:	4b41      	ldr	r3, [pc, #260]	; (8002c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a40      	ldr	r2, [pc, #256]	; (8002c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b1c:	f7fe fad6 	bl	80010cc <HAL_GetTick>
 8002b20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b22:	e009      	b.n	8002b38 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b24:	f7fe fad2 	bl	80010cc <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d902      	bls.n	8002b38 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	73fb      	strb	r3, [r7, #15]
        break;
 8002b36:	e005      	b.n	8002b44 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b38:	4b37      	ldr	r3, [pc, #220]	; (8002c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1ef      	bne.n	8002b24 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b44:	7bfb      	ldrb	r3, [r7, #15]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d160      	bne.n	8002c0c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d111      	bne.n	8002b74 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b50:	4b31      	ldr	r3, [pc, #196]	; (8002c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	6892      	ldr	r2, [r2, #8]
 8002b60:	0211      	lsls	r1, r2, #8
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	68d2      	ldr	r2, [r2, #12]
 8002b66:	0912      	lsrs	r2, r2, #4
 8002b68:	0452      	lsls	r2, r2, #17
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	492a      	ldr	r1, [pc, #168]	; (8002c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	610b      	str	r3, [r1, #16]
 8002b72:	e027      	b.n	8002bc4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d112      	bne.n	8002ba0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b7a:	4b27      	ldr	r3, [pc, #156]	; (8002c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002b82:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	6892      	ldr	r2, [r2, #8]
 8002b8a:	0211      	lsls	r1, r2, #8
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	6912      	ldr	r2, [r2, #16]
 8002b90:	0852      	lsrs	r2, r2, #1
 8002b92:	3a01      	subs	r2, #1
 8002b94:	0552      	lsls	r2, r2, #21
 8002b96:	430a      	orrs	r2, r1
 8002b98:	491f      	ldr	r1, [pc, #124]	; (8002c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	610b      	str	r3, [r1, #16]
 8002b9e:	e011      	b.n	8002bc4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ba0:	4b1d      	ldr	r3, [pc, #116]	; (8002c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ba8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	6892      	ldr	r2, [r2, #8]
 8002bb0:	0211      	lsls	r1, r2, #8
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6952      	ldr	r2, [r2, #20]
 8002bb6:	0852      	lsrs	r2, r2, #1
 8002bb8:	3a01      	subs	r2, #1
 8002bba:	0652      	lsls	r2, r2, #25
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	4916      	ldr	r1, [pc, #88]	; (8002c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002bc4:	4b14      	ldr	r3, [pc, #80]	; (8002c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a13      	ldr	r2, [pc, #76]	; (8002c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002bce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd0:	f7fe fa7c 	bl	80010cc <HAL_GetTick>
 8002bd4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002bd6:	e009      	b.n	8002bec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bd8:	f7fe fa78 	bl	80010cc <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d902      	bls.n	8002bec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	73fb      	strb	r3, [r7, #15]
          break;
 8002bea:	e005      	b.n	8002bf8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002bec:	4b0a      	ldr	r3, [pc, #40]	; (8002c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d0ef      	beq.n	8002bd8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002bf8:	7bfb      	ldrb	r3, [r7, #15]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d106      	bne.n	8002c0c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002bfe:	4b06      	ldr	r3, [pc, #24]	; (8002c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c00:	691a      	ldr	r2, [r3, #16]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	4904      	ldr	r1, [pc, #16]	; (8002c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40021000 	.word	0x40021000

08002c1c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c26:	2300      	movs	r3, #0
 8002c28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c2a:	4b6a      	ldr	r3, [pc, #424]	; (8002dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	f003 0303 	and.w	r3, r3, #3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d018      	beq.n	8002c68 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002c36:	4b67      	ldr	r3, [pc, #412]	; (8002dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f003 0203 	and.w	r2, r3, #3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d10d      	bne.n	8002c62 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
       ||
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d009      	beq.n	8002c62 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002c4e:	4b61      	ldr	r3, [pc, #388]	; (8002dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	091b      	lsrs	r3, r3, #4
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	1c5a      	adds	r2, r3, #1
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
       ||
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d047      	beq.n	8002cf2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	73fb      	strb	r3, [r7, #15]
 8002c66:	e044      	b.n	8002cf2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2b03      	cmp	r3, #3
 8002c6e:	d018      	beq.n	8002ca2 <RCCEx_PLLSAI2_Config+0x86>
 8002c70:	2b03      	cmp	r3, #3
 8002c72:	d825      	bhi.n	8002cc0 <RCCEx_PLLSAI2_Config+0xa4>
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d002      	beq.n	8002c7e <RCCEx_PLLSAI2_Config+0x62>
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d009      	beq.n	8002c90 <RCCEx_PLLSAI2_Config+0x74>
 8002c7c:	e020      	b.n	8002cc0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c7e:	4b55      	ldr	r3, [pc, #340]	; (8002dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d11d      	bne.n	8002cc6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c8e:	e01a      	b.n	8002cc6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c90:	4b50      	ldr	r3, [pc, #320]	; (8002dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d116      	bne.n	8002cca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ca0:	e013      	b.n	8002cca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ca2:	4b4c      	ldr	r3, [pc, #304]	; (8002dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10f      	bne.n	8002cce <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002cae:	4b49      	ldr	r3, [pc, #292]	; (8002dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d109      	bne.n	8002cce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002cbe:	e006      	b.n	8002cce <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8002cc4:	e004      	b.n	8002cd0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002cc6:	bf00      	nop
 8002cc8:	e002      	b.n	8002cd0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002cca:	bf00      	nop
 8002ccc:	e000      	b.n	8002cd0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002cce:	bf00      	nop
    }

    if(status == HAL_OK)
 8002cd0:	7bfb      	ldrb	r3, [r7, #15]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10d      	bne.n	8002cf2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002cd6:	4b3f      	ldr	r3, [pc, #252]	; (8002dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6819      	ldr	r1, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	011b      	lsls	r3, r3, #4
 8002cea:	430b      	orrs	r3, r1
 8002cec:	4939      	ldr	r1, [pc, #228]	; (8002dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002cf2:	7bfb      	ldrb	r3, [r7, #15]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d167      	bne.n	8002dc8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002cf8:	4b36      	ldr	r3, [pc, #216]	; (8002dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a35      	ldr	r2, [pc, #212]	; (8002dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d04:	f7fe f9e2 	bl	80010cc <HAL_GetTick>
 8002d08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d0a:	e009      	b.n	8002d20 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d0c:	f7fe f9de 	bl	80010cc <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d902      	bls.n	8002d20 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	73fb      	strb	r3, [r7, #15]
        break;
 8002d1e:	e005      	b.n	8002d2c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d20:	4b2c      	ldr	r3, [pc, #176]	; (8002dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1ef      	bne.n	8002d0c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d2c:	7bfb      	ldrb	r3, [r7, #15]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d14a      	bne.n	8002dc8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d111      	bne.n	8002d5c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d38:	4b26      	ldr	r3, [pc, #152]	; (8002dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	6892      	ldr	r2, [r2, #8]
 8002d48:	0211      	lsls	r1, r2, #8
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	68d2      	ldr	r2, [r2, #12]
 8002d4e:	0912      	lsrs	r2, r2, #4
 8002d50:	0452      	lsls	r2, r2, #17
 8002d52:	430a      	orrs	r2, r1
 8002d54:	491f      	ldr	r1, [pc, #124]	; (8002dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	614b      	str	r3, [r1, #20]
 8002d5a:	e011      	b.n	8002d80 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d5c:	4b1d      	ldr	r3, [pc, #116]	; (8002dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6892      	ldr	r2, [r2, #8]
 8002d6c:	0211      	lsls	r1, r2, #8
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	6912      	ldr	r2, [r2, #16]
 8002d72:	0852      	lsrs	r2, r2, #1
 8002d74:	3a01      	subs	r2, #1
 8002d76:	0652      	lsls	r2, r2, #25
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	4916      	ldr	r1, [pc, #88]	; (8002dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002d80:	4b14      	ldr	r3, [pc, #80]	; (8002dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a13      	ldr	r2, [pc, #76]	; (8002dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d8c:	f7fe f99e 	bl	80010cc <HAL_GetTick>
 8002d90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d92:	e009      	b.n	8002da8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d94:	f7fe f99a 	bl	80010cc <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d902      	bls.n	8002da8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	73fb      	strb	r3, [r7, #15]
          break;
 8002da6:	e005      	b.n	8002db4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002da8:	4b0a      	ldr	r3, [pc, #40]	; (8002dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0ef      	beq.n	8002d94 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002db4:	7bfb      	ldrb	r3, [r7, #15]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d106      	bne.n	8002dc8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002dba:	4b06      	ldr	r3, [pc, #24]	; (8002dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dbc:	695a      	ldr	r2, [r3, #20]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	4904      	ldr	r1, [pc, #16]	; (8002dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40021000 	.word	0x40021000

08002dd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e040      	b.n	8002e6c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d106      	bne.n	8002e00 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7fe f82a 	bl	8000e54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2224      	movs	r2, #36	; 0x24
 8002e04:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 0201 	bic.w	r2, r2, #1
 8002e14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 fc7c 	bl	8003714 <UART_SetConfig>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d101      	bne.n	8002e26 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e022      	b.n	8002e6c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 ff28 	bl	8003c84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689a      	ldr	r2, [r3, #8]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0201 	orr.w	r2, r2, #1
 8002e62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 ffaf 	bl	8003dc8 <UART_CheckIdleState>
 8002e6a:	4603      	mov	r3, r0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b08a      	sub	sp, #40	; 0x28
 8002e78:	af02      	add	r7, sp, #8
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	603b      	str	r3, [r7, #0]
 8002e80:	4613      	mov	r3, r2
 8002e82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e88:	2b20      	cmp	r3, #32
 8002e8a:	f040 8082 	bne.w	8002f92 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d002      	beq.n	8002e9a <HAL_UART_Transmit+0x26>
 8002e94:	88fb      	ldrh	r3, [r7, #6]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e07a      	b.n	8002f94 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d101      	bne.n	8002eac <HAL_UART_Transmit+0x38>
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	e073      	b.n	8002f94 <HAL_UART_Transmit+0x120>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2221      	movs	r2, #33	; 0x21
 8002ec0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ec2:	f7fe f903 	bl	80010cc <HAL_GetTick>
 8002ec6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	88fa      	ldrh	r2, [r7, #6]
 8002ecc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	88fa      	ldrh	r2, [r7, #6]
 8002ed4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee0:	d108      	bne.n	8002ef4 <HAL_UART_Transmit+0x80>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d104      	bne.n	8002ef4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002eea:	2300      	movs	r3, #0
 8002eec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	61bb      	str	r3, [r7, #24]
 8002ef2:	e003      	b.n	8002efc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002f04:	e02d      	b.n	8002f62 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	2180      	movs	r1, #128	; 0x80
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f000 ffa2 	bl	8003e5a <UART_WaitOnFlagUntilTimeout>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e039      	b.n	8002f94 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10b      	bne.n	8002f3e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	881a      	ldrh	r2, [r3, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f32:	b292      	uxth	r2, r2
 8002f34:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	3302      	adds	r3, #2
 8002f3a:	61bb      	str	r3, [r7, #24]
 8002f3c:	e008      	b.n	8002f50 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	781a      	ldrb	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	b292      	uxth	r2, r2
 8002f48:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1cb      	bne.n	8002f06 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	2200      	movs	r2, #0
 8002f76:	2140      	movs	r1, #64	; 0x40
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f000 ff6e 	bl	8003e5a <UART_WaitOnFlagUntilTimeout>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e005      	b.n	8002f94 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	e000      	b.n	8002f94 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002f92:	2302      	movs	r3, #2
  }
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3720      	adds	r7, #32
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b08b      	sub	sp, #44	; 0x2c
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fae:	2b20      	cmp	r3, #32
 8002fb0:	d156      	bne.n	8003060 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d002      	beq.n	8002fbe <HAL_UART_Transmit_IT+0x22>
 8002fb8:	88fb      	ldrh	r3, [r7, #6]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e04f      	b.n	8003062 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d101      	bne.n	8002fd0 <HAL_UART_Transmit_IT+0x34>
 8002fcc:	2302      	movs	r3, #2
 8002fce:	e048      	b.n	8003062 <HAL_UART_Transmit_IT+0xc6>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	88fa      	ldrh	r2, [r7, #6]
 8002fe2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	88fa      	ldrh	r2, [r7, #6]
 8002fea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2221      	movs	r2, #33	; 0x21
 8003000:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800300a:	d107      	bne.n	800301c <HAL_UART_Transmit_IT+0x80>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d103      	bne.n	800301c <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4a16      	ldr	r2, [pc, #88]	; (8003070 <HAL_UART_Transmit_IT+0xd4>)
 8003018:	669a      	str	r2, [r3, #104]	; 0x68
 800301a:	e002      	b.n	8003022 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4a15      	ldr	r2, [pc, #84]	; (8003074 <HAL_UART_Transmit_IT+0xd8>)
 8003020:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	e853 3f00 	ldrex	r3, [r3]
 8003036:	613b      	str	r3, [r7, #16]
   return(result);
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800303e:	627b      	str	r3, [r7, #36]	; 0x24
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	461a      	mov	r2, r3
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	623b      	str	r3, [r7, #32]
 800304a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800304c:	69f9      	ldr	r1, [r7, #28]
 800304e:	6a3a      	ldr	r2, [r7, #32]
 8003050:	e841 2300 	strex	r3, r2, [r1]
 8003054:	61bb      	str	r3, [r7, #24]
   return(result);
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1e6      	bne.n	800302a <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800305c:	2300      	movs	r3, #0
 800305e:	e000      	b.n	8003062 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8003060:	2302      	movs	r3, #2
  }
}
 8003062:	4618      	mov	r0, r3
 8003064:	372c      	adds	r7, #44	; 0x2c
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	08004323 	.word	0x08004323
 8003074:	0800426b 	.word	0x0800426b

08003078 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b08a      	sub	sp, #40	; 0x28
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	4613      	mov	r3, r2
 8003084:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800308a:	2b20      	cmp	r3, #32
 800308c:	d142      	bne.n	8003114 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d002      	beq.n	800309a <HAL_UART_Receive_IT+0x22>
 8003094:	88fb      	ldrh	r3, [r7, #6]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e03b      	b.n	8003116 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d101      	bne.n	80030ac <HAL_UART_Receive_IT+0x34>
 80030a8:	2302      	movs	r3, #2
 80030aa:	e034      	b.n	8003116 <HAL_UART_Receive_IT+0x9e>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a18      	ldr	r2, [pc, #96]	; (8003120 <HAL_UART_Receive_IT+0xa8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d01f      	beq.n	8003104 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d018      	beq.n	8003104 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	e853 3f00 	ldrex	r3, [r3]
 80030de:	613b      	str	r3, [r7, #16]
   return(result);
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030e6:	627b      	str	r3, [r7, #36]	; 0x24
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	461a      	mov	r2, r3
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f0:	623b      	str	r3, [r7, #32]
 80030f2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f4:	69f9      	ldr	r1, [r7, #28]
 80030f6:	6a3a      	ldr	r2, [r7, #32]
 80030f8:	e841 2300 	strex	r3, r2, [r1]
 80030fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1e6      	bne.n	80030d2 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003104:	88fb      	ldrh	r3, [r7, #6]
 8003106:	461a      	mov	r2, r3
 8003108:	68b9      	ldr	r1, [r7, #8]
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 ff6a 	bl	8003fe4 <UART_Start_Receive_IT>
 8003110:	4603      	mov	r3, r0
 8003112:	e000      	b.n	8003116 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003114:	2302      	movs	r3, #2
  }
}
 8003116:	4618      	mov	r0, r3
 8003118:	3728      	adds	r7, #40	; 0x28
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	40008000 	.word	0x40008000

08003124 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b0ba      	sub	sp, #232	; 0xe8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800314a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800314e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003152:	4013      	ands	r3, r2
 8003154:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003158:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800315c:	2b00      	cmp	r3, #0
 800315e:	d115      	bne.n	800318c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003164:	f003 0320 	and.w	r3, r3, #32
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00f      	beq.n	800318c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800316c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003170:	f003 0320 	and.w	r3, r3, #32
 8003174:	2b00      	cmp	r3, #0
 8003176:	d009      	beq.n	800318c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 82a6 	beq.w	80036ce <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	4798      	blx	r3
      }
      return;
 800318a:	e2a0      	b.n	80036ce <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800318c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 8117 	beq.w	80033c4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003196:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d106      	bne.n	80031b0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80031a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80031a6:	4b85      	ldr	r3, [pc, #532]	; (80033bc <HAL_UART_IRQHandler+0x298>)
 80031a8:	4013      	ands	r3, r2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 810a 	beq.w	80033c4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80031b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d011      	beq.n	80031e0 <HAL_UART_IRQHandler+0xbc>
 80031bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00b      	beq.n	80031e0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2201      	movs	r2, #1
 80031ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031d6:	f043 0201 	orr.w	r2, r3, #1
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d011      	beq.n	8003210 <HAL_UART_IRQHandler+0xec>
 80031ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00b      	beq.n	8003210 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2202      	movs	r2, #2
 80031fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003206:	f043 0204 	orr.w	r2, r3, #4
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b00      	cmp	r3, #0
 800321a:	d011      	beq.n	8003240 <HAL_UART_IRQHandler+0x11c>
 800321c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00b      	beq.n	8003240 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2204      	movs	r2, #4
 800322e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003236:	f043 0202 	orr.w	r2, r3, #2
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	2b00      	cmp	r3, #0
 800324a:	d017      	beq.n	800327c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800324c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003250:	f003 0320 	and.w	r3, r3, #32
 8003254:	2b00      	cmp	r3, #0
 8003256:	d105      	bne.n	8003264 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003258:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800325c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00b      	beq.n	800327c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2208      	movs	r2, #8
 800326a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003272:	f043 0208 	orr.w	r2, r3, #8
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800327c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003280:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003284:	2b00      	cmp	r3, #0
 8003286:	d012      	beq.n	80032ae <HAL_UART_IRQHandler+0x18a>
 8003288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800328c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00c      	beq.n	80032ae <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800329c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032a4:	f043 0220 	orr.w	r2, r3, #32
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 820c 	beq.w	80036d2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80032ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032be:	f003 0320 	and.w	r3, r3, #32
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00d      	beq.n	80032e2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80032c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032ca:	f003 0320 	and.w	r3, r3, #32
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d007      	beq.n	80032e2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f6:	2b40      	cmp	r3, #64	; 0x40
 80032f8:	d005      	beq.n	8003306 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80032fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80032fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003302:	2b00      	cmp	r3, #0
 8003304:	d04f      	beq.n	80033a6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 ff36 	bl	8004178 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003316:	2b40      	cmp	r3, #64	; 0x40
 8003318:	d141      	bne.n	800339e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	3308      	adds	r3, #8
 8003320:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003324:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003328:	e853 3f00 	ldrex	r3, [r3]
 800332c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003330:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003334:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003338:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	3308      	adds	r3, #8
 8003342:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003346:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800334a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003352:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003356:	e841 2300 	strex	r3, r2, [r1]
 800335a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800335e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1d9      	bne.n	800331a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336a:	2b00      	cmp	r3, #0
 800336c:	d013      	beq.n	8003396 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003372:	4a13      	ldr	r2, [pc, #76]	; (80033c0 <HAL_UART_IRQHandler+0x29c>)
 8003374:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337a:	4618      	mov	r0, r3
 800337c:	f7fe f801 	bl	8001382 <HAL_DMA_Abort_IT>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d017      	beq.n	80033b6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003390:	4610      	mov	r0, r2
 8003392:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003394:	e00f      	b.n	80033b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f9a6 	bl	80036e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800339c:	e00b      	b.n	80033b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f9a2 	bl	80036e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a4:	e007      	b.n	80033b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f99e 	bl	80036e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80033b4:	e18d      	b.n	80036d2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b6:	bf00      	nop
    return;
 80033b8:	e18b      	b.n	80036d2 <HAL_UART_IRQHandler+0x5ae>
 80033ba:	bf00      	nop
 80033bc:	04000120 	.word	0x04000120
 80033c0:	0800423f 	.word	0x0800423f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	f040 8146 	bne.w	800365a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80033ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033d2:	f003 0310 	and.w	r3, r3, #16
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 813f 	beq.w	800365a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80033dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033e0:	f003 0310 	and.w	r3, r3, #16
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 8138 	beq.w	800365a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2210      	movs	r2, #16
 80033f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fc:	2b40      	cmp	r3, #64	; 0x40
 80033fe:	f040 80b4 	bne.w	800356a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800340e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003412:	2b00      	cmp	r3, #0
 8003414:	f000 815f 	beq.w	80036d6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800341e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003422:	429a      	cmp	r2, r3
 8003424:	f080 8157 	bcs.w	80036d6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800342e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0320 	and.w	r3, r3, #32
 800343e:	2b00      	cmp	r3, #0
 8003440:	f040 8085 	bne.w	800354e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800344c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003450:	e853 3f00 	ldrex	r3, [r3]
 8003454:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003458:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800345c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003460:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	461a      	mov	r2, r3
 800346a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800346e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003472:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003476:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800347a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800347e:	e841 2300 	strex	r3, r2, [r1]
 8003482:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003486:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1da      	bne.n	8003444 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	3308      	adds	r3, #8
 8003494:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003496:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003498:	e853 3f00 	ldrex	r3, [r3]
 800349c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800349e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034a0:	f023 0301 	bic.w	r3, r3, #1
 80034a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	3308      	adds	r3, #8
 80034ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80034b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80034b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80034ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80034be:	e841 2300 	strex	r3, r2, [r1]
 80034c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80034c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1e1      	bne.n	800348e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	3308      	adds	r3, #8
 80034d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034d4:	e853 3f00 	ldrex	r3, [r3]
 80034d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80034da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	3308      	adds	r3, #8
 80034ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80034ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80034f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80034f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80034f6:	e841 2300 	strex	r3, r2, [r1]
 80034fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80034fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1e3      	bne.n	80034ca <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2220      	movs	r2, #32
 8003506:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003516:	e853 3f00 	ldrex	r3, [r3]
 800351a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800351c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800351e:	f023 0310 	bic.w	r3, r3, #16
 8003522:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	461a      	mov	r2, r3
 800352c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003530:	65bb      	str	r3, [r7, #88]	; 0x58
 8003532:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003534:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003536:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003538:	e841 2300 	strex	r3, r2, [r1]
 800353c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800353e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1e4      	bne.n	800350e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003548:	4618      	mov	r0, r3
 800354a:	f7fd fedc 	bl	8001306 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800355a:	b29b      	uxth	r3, r3
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	b29b      	uxth	r3, r3
 8003560:	4619      	mov	r1, r3
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f8ca 	bl	80036fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003568:	e0b5      	b.n	80036d6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003576:	b29b      	uxth	r3, r3
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003584:	b29b      	uxth	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 80a7 	beq.w	80036da <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800358c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 80a2 	beq.w	80036da <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800359e:	e853 3f00 	ldrex	r3, [r3]
 80035a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80035a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	461a      	mov	r2, r3
 80035b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80035b8:	647b      	str	r3, [r7, #68]	; 0x44
 80035ba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80035be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035c0:	e841 2300 	strex	r3, r2, [r1]
 80035c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1e4      	bne.n	8003596 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	3308      	adds	r3, #8
 80035d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	e853 3f00 	ldrex	r3, [r3]
 80035da:	623b      	str	r3, [r7, #32]
   return(result);
 80035dc:	6a3b      	ldr	r3, [r7, #32]
 80035de:	f023 0301 	bic.w	r3, r3, #1
 80035e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	3308      	adds	r3, #8
 80035ec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80035f0:	633a      	str	r2, [r7, #48]	; 0x30
 80035f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035f8:	e841 2300 	strex	r3, r2, [r1]
 80035fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80035fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1e3      	bne.n	80035cc <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2220      	movs	r2, #32
 8003608:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	e853 3f00 	ldrex	r3, [r3]
 8003622:	60fb      	str	r3, [r7, #12]
   return(result);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f023 0310 	bic.w	r3, r3, #16
 800362a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	461a      	mov	r2, r3
 8003634:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003638:	61fb      	str	r3, [r7, #28]
 800363a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363c:	69b9      	ldr	r1, [r7, #24]
 800363e:	69fa      	ldr	r2, [r7, #28]
 8003640:	e841 2300 	strex	r3, r2, [r1]
 8003644:	617b      	str	r3, [r7, #20]
   return(result);
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1e4      	bne.n	8003616 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800364c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003650:	4619      	mov	r1, r3
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f852 	bl	80036fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003658:	e03f      	b.n	80036da <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800365a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800365e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00e      	beq.n	8003684 <HAL_UART_IRQHandler+0x560>
 8003666:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800366a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d008      	beq.n	8003684 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800367a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f001 f83a 	bl	80046f6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003682:	e02d      	b.n	80036e0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00e      	beq.n	80036ae <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003698:	2b00      	cmp	r3, #0
 800369a:	d008      	beq.n	80036ae <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d01c      	beq.n	80036de <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	4798      	blx	r3
    }
    return;
 80036ac:	e017      	b.n	80036de <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80036ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d012      	beq.n	80036e0 <HAL_UART_IRQHandler+0x5bc>
 80036ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00c      	beq.n	80036e0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 fe8b 	bl	80043e2 <UART_EndTransmit_IT>
    return;
 80036cc:	e008      	b.n	80036e0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80036ce:	bf00      	nop
 80036d0:	e006      	b.n	80036e0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80036d2:	bf00      	nop
 80036d4:	e004      	b.n	80036e0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80036d6:	bf00      	nop
 80036d8:	e002      	b.n	80036e0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80036da:	bf00      	nop
 80036dc:	e000      	b.n	80036e0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80036de:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80036e0:	37e8      	adds	r7, #232	; 0xe8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop

080036e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	460b      	mov	r3, r1
 8003706:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003718:	b08a      	sub	sp, #40	; 0x28
 800371a:	af00      	add	r7, sp, #0
 800371c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800371e:	2300      	movs	r3, #0
 8003720:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	431a      	orrs	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	431a      	orrs	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	4313      	orrs	r3, r2
 800373a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	4ba4      	ldr	r3, [pc, #656]	; (80039d4 <UART_SetConfig+0x2c0>)
 8003744:	4013      	ands	r3, r2
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	6812      	ldr	r2, [r2, #0]
 800374a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800374c:	430b      	orrs	r3, r1
 800374e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	68da      	ldr	r2, [r3, #12]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a99      	ldr	r2, [pc, #612]	; (80039d8 <UART_SetConfig+0x2c4>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d004      	beq.n	8003780 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800377c:	4313      	orrs	r3, r2
 800377e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003790:	430a      	orrs	r2, r1
 8003792:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a90      	ldr	r2, [pc, #576]	; (80039dc <UART_SetConfig+0x2c8>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d126      	bne.n	80037ec <UART_SetConfig+0xd8>
 800379e:	4b90      	ldr	r3, [pc, #576]	; (80039e0 <UART_SetConfig+0x2cc>)
 80037a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a4:	f003 0303 	and.w	r3, r3, #3
 80037a8:	2b03      	cmp	r3, #3
 80037aa:	d81b      	bhi.n	80037e4 <UART_SetConfig+0xd0>
 80037ac:	a201      	add	r2, pc, #4	; (adr r2, 80037b4 <UART_SetConfig+0xa0>)
 80037ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b2:	bf00      	nop
 80037b4:	080037c5 	.word	0x080037c5
 80037b8:	080037d5 	.word	0x080037d5
 80037bc:	080037cd 	.word	0x080037cd
 80037c0:	080037dd 	.word	0x080037dd
 80037c4:	2301      	movs	r3, #1
 80037c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ca:	e116      	b.n	80039fa <UART_SetConfig+0x2e6>
 80037cc:	2302      	movs	r3, #2
 80037ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037d2:	e112      	b.n	80039fa <UART_SetConfig+0x2e6>
 80037d4:	2304      	movs	r3, #4
 80037d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037da:	e10e      	b.n	80039fa <UART_SetConfig+0x2e6>
 80037dc:	2308      	movs	r3, #8
 80037de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037e2:	e10a      	b.n	80039fa <UART_SetConfig+0x2e6>
 80037e4:	2310      	movs	r3, #16
 80037e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ea:	e106      	b.n	80039fa <UART_SetConfig+0x2e6>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a7c      	ldr	r2, [pc, #496]	; (80039e4 <UART_SetConfig+0x2d0>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d138      	bne.n	8003868 <UART_SetConfig+0x154>
 80037f6:	4b7a      	ldr	r3, [pc, #488]	; (80039e0 <UART_SetConfig+0x2cc>)
 80037f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fc:	f003 030c 	and.w	r3, r3, #12
 8003800:	2b0c      	cmp	r3, #12
 8003802:	d82d      	bhi.n	8003860 <UART_SetConfig+0x14c>
 8003804:	a201      	add	r2, pc, #4	; (adr r2, 800380c <UART_SetConfig+0xf8>)
 8003806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800380a:	bf00      	nop
 800380c:	08003841 	.word	0x08003841
 8003810:	08003861 	.word	0x08003861
 8003814:	08003861 	.word	0x08003861
 8003818:	08003861 	.word	0x08003861
 800381c:	08003851 	.word	0x08003851
 8003820:	08003861 	.word	0x08003861
 8003824:	08003861 	.word	0x08003861
 8003828:	08003861 	.word	0x08003861
 800382c:	08003849 	.word	0x08003849
 8003830:	08003861 	.word	0x08003861
 8003834:	08003861 	.word	0x08003861
 8003838:	08003861 	.word	0x08003861
 800383c:	08003859 	.word	0x08003859
 8003840:	2300      	movs	r3, #0
 8003842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003846:	e0d8      	b.n	80039fa <UART_SetConfig+0x2e6>
 8003848:	2302      	movs	r3, #2
 800384a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800384e:	e0d4      	b.n	80039fa <UART_SetConfig+0x2e6>
 8003850:	2304      	movs	r3, #4
 8003852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003856:	e0d0      	b.n	80039fa <UART_SetConfig+0x2e6>
 8003858:	2308      	movs	r3, #8
 800385a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800385e:	e0cc      	b.n	80039fa <UART_SetConfig+0x2e6>
 8003860:	2310      	movs	r3, #16
 8003862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003866:	e0c8      	b.n	80039fa <UART_SetConfig+0x2e6>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a5e      	ldr	r2, [pc, #376]	; (80039e8 <UART_SetConfig+0x2d4>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d125      	bne.n	80038be <UART_SetConfig+0x1aa>
 8003872:	4b5b      	ldr	r3, [pc, #364]	; (80039e0 <UART_SetConfig+0x2cc>)
 8003874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003878:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800387c:	2b30      	cmp	r3, #48	; 0x30
 800387e:	d016      	beq.n	80038ae <UART_SetConfig+0x19a>
 8003880:	2b30      	cmp	r3, #48	; 0x30
 8003882:	d818      	bhi.n	80038b6 <UART_SetConfig+0x1a2>
 8003884:	2b20      	cmp	r3, #32
 8003886:	d00a      	beq.n	800389e <UART_SetConfig+0x18a>
 8003888:	2b20      	cmp	r3, #32
 800388a:	d814      	bhi.n	80038b6 <UART_SetConfig+0x1a2>
 800388c:	2b00      	cmp	r3, #0
 800388e:	d002      	beq.n	8003896 <UART_SetConfig+0x182>
 8003890:	2b10      	cmp	r3, #16
 8003892:	d008      	beq.n	80038a6 <UART_SetConfig+0x192>
 8003894:	e00f      	b.n	80038b6 <UART_SetConfig+0x1a2>
 8003896:	2300      	movs	r3, #0
 8003898:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800389c:	e0ad      	b.n	80039fa <UART_SetConfig+0x2e6>
 800389e:	2302      	movs	r3, #2
 80038a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038a4:	e0a9      	b.n	80039fa <UART_SetConfig+0x2e6>
 80038a6:	2304      	movs	r3, #4
 80038a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ac:	e0a5      	b.n	80039fa <UART_SetConfig+0x2e6>
 80038ae:	2308      	movs	r3, #8
 80038b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038b4:	e0a1      	b.n	80039fa <UART_SetConfig+0x2e6>
 80038b6:	2310      	movs	r3, #16
 80038b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038bc:	e09d      	b.n	80039fa <UART_SetConfig+0x2e6>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a4a      	ldr	r2, [pc, #296]	; (80039ec <UART_SetConfig+0x2d8>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d125      	bne.n	8003914 <UART_SetConfig+0x200>
 80038c8:	4b45      	ldr	r3, [pc, #276]	; (80039e0 <UART_SetConfig+0x2cc>)
 80038ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80038d2:	2bc0      	cmp	r3, #192	; 0xc0
 80038d4:	d016      	beq.n	8003904 <UART_SetConfig+0x1f0>
 80038d6:	2bc0      	cmp	r3, #192	; 0xc0
 80038d8:	d818      	bhi.n	800390c <UART_SetConfig+0x1f8>
 80038da:	2b80      	cmp	r3, #128	; 0x80
 80038dc:	d00a      	beq.n	80038f4 <UART_SetConfig+0x1e0>
 80038de:	2b80      	cmp	r3, #128	; 0x80
 80038e0:	d814      	bhi.n	800390c <UART_SetConfig+0x1f8>
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <UART_SetConfig+0x1d8>
 80038e6:	2b40      	cmp	r3, #64	; 0x40
 80038e8:	d008      	beq.n	80038fc <UART_SetConfig+0x1e8>
 80038ea:	e00f      	b.n	800390c <UART_SetConfig+0x1f8>
 80038ec:	2300      	movs	r3, #0
 80038ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038f2:	e082      	b.n	80039fa <UART_SetConfig+0x2e6>
 80038f4:	2302      	movs	r3, #2
 80038f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038fa:	e07e      	b.n	80039fa <UART_SetConfig+0x2e6>
 80038fc:	2304      	movs	r3, #4
 80038fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003902:	e07a      	b.n	80039fa <UART_SetConfig+0x2e6>
 8003904:	2308      	movs	r3, #8
 8003906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800390a:	e076      	b.n	80039fa <UART_SetConfig+0x2e6>
 800390c:	2310      	movs	r3, #16
 800390e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003912:	e072      	b.n	80039fa <UART_SetConfig+0x2e6>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a35      	ldr	r2, [pc, #212]	; (80039f0 <UART_SetConfig+0x2dc>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d12a      	bne.n	8003974 <UART_SetConfig+0x260>
 800391e:	4b30      	ldr	r3, [pc, #192]	; (80039e0 <UART_SetConfig+0x2cc>)
 8003920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003924:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003928:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800392c:	d01a      	beq.n	8003964 <UART_SetConfig+0x250>
 800392e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003932:	d81b      	bhi.n	800396c <UART_SetConfig+0x258>
 8003934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003938:	d00c      	beq.n	8003954 <UART_SetConfig+0x240>
 800393a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800393e:	d815      	bhi.n	800396c <UART_SetConfig+0x258>
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <UART_SetConfig+0x238>
 8003944:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003948:	d008      	beq.n	800395c <UART_SetConfig+0x248>
 800394a:	e00f      	b.n	800396c <UART_SetConfig+0x258>
 800394c:	2300      	movs	r3, #0
 800394e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003952:	e052      	b.n	80039fa <UART_SetConfig+0x2e6>
 8003954:	2302      	movs	r3, #2
 8003956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800395a:	e04e      	b.n	80039fa <UART_SetConfig+0x2e6>
 800395c:	2304      	movs	r3, #4
 800395e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003962:	e04a      	b.n	80039fa <UART_SetConfig+0x2e6>
 8003964:	2308      	movs	r3, #8
 8003966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800396a:	e046      	b.n	80039fa <UART_SetConfig+0x2e6>
 800396c:	2310      	movs	r3, #16
 800396e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003972:	e042      	b.n	80039fa <UART_SetConfig+0x2e6>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a17      	ldr	r2, [pc, #92]	; (80039d8 <UART_SetConfig+0x2c4>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d13a      	bne.n	80039f4 <UART_SetConfig+0x2e0>
 800397e:	4b18      	ldr	r3, [pc, #96]	; (80039e0 <UART_SetConfig+0x2cc>)
 8003980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003984:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003988:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800398c:	d01a      	beq.n	80039c4 <UART_SetConfig+0x2b0>
 800398e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003992:	d81b      	bhi.n	80039cc <UART_SetConfig+0x2b8>
 8003994:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003998:	d00c      	beq.n	80039b4 <UART_SetConfig+0x2a0>
 800399a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800399e:	d815      	bhi.n	80039cc <UART_SetConfig+0x2b8>
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d003      	beq.n	80039ac <UART_SetConfig+0x298>
 80039a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039a8:	d008      	beq.n	80039bc <UART_SetConfig+0x2a8>
 80039aa:	e00f      	b.n	80039cc <UART_SetConfig+0x2b8>
 80039ac:	2300      	movs	r3, #0
 80039ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039b2:	e022      	b.n	80039fa <UART_SetConfig+0x2e6>
 80039b4:	2302      	movs	r3, #2
 80039b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ba:	e01e      	b.n	80039fa <UART_SetConfig+0x2e6>
 80039bc:	2304      	movs	r3, #4
 80039be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039c2:	e01a      	b.n	80039fa <UART_SetConfig+0x2e6>
 80039c4:	2308      	movs	r3, #8
 80039c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ca:	e016      	b.n	80039fa <UART_SetConfig+0x2e6>
 80039cc:	2310      	movs	r3, #16
 80039ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039d2:	e012      	b.n	80039fa <UART_SetConfig+0x2e6>
 80039d4:	efff69f3 	.word	0xefff69f3
 80039d8:	40008000 	.word	0x40008000
 80039dc:	40013800 	.word	0x40013800
 80039e0:	40021000 	.word	0x40021000
 80039e4:	40004400 	.word	0x40004400
 80039e8:	40004800 	.word	0x40004800
 80039ec:	40004c00 	.word	0x40004c00
 80039f0:	40005000 	.word	0x40005000
 80039f4:	2310      	movs	r3, #16
 80039f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a9f      	ldr	r2, [pc, #636]	; (8003c7c <UART_SetConfig+0x568>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d17a      	bne.n	8003afa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a08:	2b08      	cmp	r3, #8
 8003a0a:	d824      	bhi.n	8003a56 <UART_SetConfig+0x342>
 8003a0c:	a201      	add	r2, pc, #4	; (adr r2, 8003a14 <UART_SetConfig+0x300>)
 8003a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a12:	bf00      	nop
 8003a14:	08003a39 	.word	0x08003a39
 8003a18:	08003a57 	.word	0x08003a57
 8003a1c:	08003a41 	.word	0x08003a41
 8003a20:	08003a57 	.word	0x08003a57
 8003a24:	08003a47 	.word	0x08003a47
 8003a28:	08003a57 	.word	0x08003a57
 8003a2c:	08003a57 	.word	0x08003a57
 8003a30:	08003a57 	.word	0x08003a57
 8003a34:	08003a4f 	.word	0x08003a4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a38:	f7fe fc86 	bl	8002348 <HAL_RCC_GetPCLK1Freq>
 8003a3c:	61f8      	str	r0, [r7, #28]
        break;
 8003a3e:	e010      	b.n	8003a62 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a40:	4b8f      	ldr	r3, [pc, #572]	; (8003c80 <UART_SetConfig+0x56c>)
 8003a42:	61fb      	str	r3, [r7, #28]
        break;
 8003a44:	e00d      	b.n	8003a62 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a46:	f7fe fbe7 	bl	8002218 <HAL_RCC_GetSysClockFreq>
 8003a4a:	61f8      	str	r0, [r7, #28]
        break;
 8003a4c:	e009      	b.n	8003a62 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a52:	61fb      	str	r3, [r7, #28]
        break;
 8003a54:	e005      	b.n	8003a62 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003a56:	2300      	movs	r3, #0
 8003a58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 80fb 	beq.w	8003c60 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	4413      	add	r3, r2
 8003a74:	69fa      	ldr	r2, [r7, #28]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d305      	bcc.n	8003a86 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a80:	69fa      	ldr	r2, [r7, #28]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d903      	bls.n	8003a8e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003a8c:	e0e8      	b.n	8003c60 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	2200      	movs	r2, #0
 8003a92:	461c      	mov	r4, r3
 8003a94:	4615      	mov	r5, r2
 8003a96:	f04f 0200 	mov.w	r2, #0
 8003a9a:	f04f 0300 	mov.w	r3, #0
 8003a9e:	022b      	lsls	r3, r5, #8
 8003aa0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003aa4:	0222      	lsls	r2, r4, #8
 8003aa6:	68f9      	ldr	r1, [r7, #12]
 8003aa8:	6849      	ldr	r1, [r1, #4]
 8003aaa:	0849      	lsrs	r1, r1, #1
 8003aac:	2000      	movs	r0, #0
 8003aae:	4688      	mov	r8, r1
 8003ab0:	4681      	mov	r9, r0
 8003ab2:	eb12 0a08 	adds.w	sl, r2, r8
 8003ab6:	eb43 0b09 	adc.w	fp, r3, r9
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	603b      	str	r3, [r7, #0]
 8003ac2:	607a      	str	r2, [r7, #4]
 8003ac4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ac8:	4650      	mov	r0, sl
 8003aca:	4659      	mov	r1, fp
 8003acc:	f7fc fb84 	bl	80001d8 <__aeabi_uldivmod>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ade:	d308      	bcc.n	8003af2 <UART_SetConfig+0x3de>
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ae6:	d204      	bcs.n	8003af2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	60da      	str	r2, [r3, #12]
 8003af0:	e0b6      	b.n	8003c60 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003af8:	e0b2      	b.n	8003c60 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b02:	d15e      	bne.n	8003bc2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003b04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d828      	bhi.n	8003b5e <UART_SetConfig+0x44a>
 8003b0c:	a201      	add	r2, pc, #4	; (adr r2, 8003b14 <UART_SetConfig+0x400>)
 8003b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b12:	bf00      	nop
 8003b14:	08003b39 	.word	0x08003b39
 8003b18:	08003b41 	.word	0x08003b41
 8003b1c:	08003b49 	.word	0x08003b49
 8003b20:	08003b5f 	.word	0x08003b5f
 8003b24:	08003b4f 	.word	0x08003b4f
 8003b28:	08003b5f 	.word	0x08003b5f
 8003b2c:	08003b5f 	.word	0x08003b5f
 8003b30:	08003b5f 	.word	0x08003b5f
 8003b34:	08003b57 	.word	0x08003b57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b38:	f7fe fc06 	bl	8002348 <HAL_RCC_GetPCLK1Freq>
 8003b3c:	61f8      	str	r0, [r7, #28]
        break;
 8003b3e:	e014      	b.n	8003b6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b40:	f7fe fc18 	bl	8002374 <HAL_RCC_GetPCLK2Freq>
 8003b44:	61f8      	str	r0, [r7, #28]
        break;
 8003b46:	e010      	b.n	8003b6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b48:	4b4d      	ldr	r3, [pc, #308]	; (8003c80 <UART_SetConfig+0x56c>)
 8003b4a:	61fb      	str	r3, [r7, #28]
        break;
 8003b4c:	e00d      	b.n	8003b6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b4e:	f7fe fb63 	bl	8002218 <HAL_RCC_GetSysClockFreq>
 8003b52:	61f8      	str	r0, [r7, #28]
        break;
 8003b54:	e009      	b.n	8003b6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b5a:	61fb      	str	r3, [r7, #28]
        break;
 8003b5c:	e005      	b.n	8003b6a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003b68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d077      	beq.n	8003c60 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	005a      	lsls	r2, r3, #1
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	085b      	lsrs	r3, r3, #1
 8003b7a:	441a      	add	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b84:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	2b0f      	cmp	r3, #15
 8003b8a:	d916      	bls.n	8003bba <UART_SetConfig+0x4a6>
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b92:	d212      	bcs.n	8003bba <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	f023 030f 	bic.w	r3, r3, #15
 8003b9c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	085b      	lsrs	r3, r3, #1
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	f003 0307 	and.w	r3, r3, #7
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	8afb      	ldrh	r3, [r7, #22]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	8afa      	ldrh	r2, [r7, #22]
 8003bb6:	60da      	str	r2, [r3, #12]
 8003bb8:	e052      	b.n	8003c60 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003bc0:	e04e      	b.n	8003c60 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bc6:	2b08      	cmp	r3, #8
 8003bc8:	d827      	bhi.n	8003c1a <UART_SetConfig+0x506>
 8003bca:	a201      	add	r2, pc, #4	; (adr r2, 8003bd0 <UART_SetConfig+0x4bc>)
 8003bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd0:	08003bf5 	.word	0x08003bf5
 8003bd4:	08003bfd 	.word	0x08003bfd
 8003bd8:	08003c05 	.word	0x08003c05
 8003bdc:	08003c1b 	.word	0x08003c1b
 8003be0:	08003c0b 	.word	0x08003c0b
 8003be4:	08003c1b 	.word	0x08003c1b
 8003be8:	08003c1b 	.word	0x08003c1b
 8003bec:	08003c1b 	.word	0x08003c1b
 8003bf0:	08003c13 	.word	0x08003c13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bf4:	f7fe fba8 	bl	8002348 <HAL_RCC_GetPCLK1Freq>
 8003bf8:	61f8      	str	r0, [r7, #28]
        break;
 8003bfa:	e014      	b.n	8003c26 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bfc:	f7fe fbba 	bl	8002374 <HAL_RCC_GetPCLK2Freq>
 8003c00:	61f8      	str	r0, [r7, #28]
        break;
 8003c02:	e010      	b.n	8003c26 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c04:	4b1e      	ldr	r3, [pc, #120]	; (8003c80 <UART_SetConfig+0x56c>)
 8003c06:	61fb      	str	r3, [r7, #28]
        break;
 8003c08:	e00d      	b.n	8003c26 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c0a:	f7fe fb05 	bl	8002218 <HAL_RCC_GetSysClockFreq>
 8003c0e:	61f8      	str	r0, [r7, #28]
        break;
 8003c10:	e009      	b.n	8003c26 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c16:	61fb      	str	r3, [r7, #28]
        break;
 8003c18:	e005      	b.n	8003c26 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c24:	bf00      	nop
    }

    if (pclk != 0U)
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d019      	beq.n	8003c60 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	085a      	lsrs	r2, r3, #1
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	441a      	add	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c3e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	2b0f      	cmp	r3, #15
 8003c44:	d909      	bls.n	8003c5a <UART_SetConfig+0x546>
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c4c:	d205      	bcs.n	8003c5a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	60da      	str	r2, [r3, #12]
 8003c58:	e002      	b.n	8003c60 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003c6c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3728      	adds	r7, #40	; 0x28
 8003c74:	46bd      	mov	sp, r7
 8003c76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c7a:	bf00      	nop
 8003c7c:	40008000 	.word	0x40008000
 8003c80:	00f42400 	.word	0x00f42400

08003c84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00a      	beq.n	8003cae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00a      	beq.n	8003cd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00a      	beq.n	8003cf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	f003 0308 	and.w	r3, r3, #8
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00a      	beq.n	8003d14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	f003 0310 	and.w	r3, r3, #16
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00a      	beq.n	8003d36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	f003 0320 	and.w	r3, r3, #32
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00a      	beq.n	8003d58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d01a      	beq.n	8003d9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d82:	d10a      	bne.n	8003d9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00a      	beq.n	8003dbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	430a      	orrs	r2, r1
 8003dba:	605a      	str	r2, [r3, #4]
  }
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af02      	add	r7, sp, #8
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003dd8:	f7fd f978 	bl	80010cc <HAL_GetTick>
 8003ddc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0308 	and.w	r3, r3, #8
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	d10e      	bne.n	8003e0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003df0:	9300      	str	r3, [sp, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f82d 	bl	8003e5a <UART_WaitOnFlagUntilTimeout>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e023      	b.n	8003e52 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	2b04      	cmp	r3, #4
 8003e16:	d10e      	bne.n	8003e36 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f817 	bl	8003e5a <UART_WaitOnFlagUntilTimeout>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e00d      	b.n	8003e52 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b09c      	sub	sp, #112	; 0x70
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	60f8      	str	r0, [r7, #12]
 8003e62:	60b9      	str	r1, [r7, #8]
 8003e64:	603b      	str	r3, [r7, #0]
 8003e66:	4613      	mov	r3, r2
 8003e68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e6a:	e0a5      	b.n	8003fb8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e72:	f000 80a1 	beq.w	8003fb8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e76:	f7fd f929 	bl	80010cc <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d302      	bcc.n	8003e8c <UART_WaitOnFlagUntilTimeout+0x32>
 8003e86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d13e      	bne.n	8003f0a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e94:	e853 3f00 	ldrex	r3, [r3]
 8003e98:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ea0:	667b      	str	r3, [r7, #100]	; 0x64
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003eaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003eac:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003eb0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003eb2:	e841 2300 	strex	r3, r2, [r1]
 8003eb6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003eb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1e6      	bne.n	8003e8c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	3308      	adds	r3, #8
 8003ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ec8:	e853 3f00 	ldrex	r3, [r3]
 8003ecc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed0:	f023 0301 	bic.w	r3, r3, #1
 8003ed4:	663b      	str	r3, [r7, #96]	; 0x60
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	3308      	adds	r3, #8
 8003edc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ede:	64ba      	str	r2, [r7, #72]	; 0x48
 8003ee0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ee4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ee6:	e841 2300 	strex	r3, r2, [r1]
 8003eea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1e5      	bne.n	8003ebe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2220      	movs	r2, #32
 8003efc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e067      	b.n	8003fda <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0304 	and.w	r3, r3, #4
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d04f      	beq.n	8003fb8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f26:	d147      	bne.n	8003fb8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f30:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3a:	e853 3f00 	ldrex	r3, [r3]
 8003f3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f50:	637b      	str	r3, [r7, #52]	; 0x34
 8003f52:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f58:	e841 2300 	strex	r3, r2, [r1]
 8003f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1e6      	bne.n	8003f32 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	3308      	adds	r3, #8
 8003f6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	e853 3f00 	ldrex	r3, [r3]
 8003f72:	613b      	str	r3, [r7, #16]
   return(result);
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	f023 0301 	bic.w	r3, r3, #1
 8003f7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	3308      	adds	r3, #8
 8003f82:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003f84:	623a      	str	r2, [r7, #32]
 8003f86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f88:	69f9      	ldr	r1, [r7, #28]
 8003f8a:	6a3a      	ldr	r2, [r7, #32]
 8003f8c:	e841 2300 	strex	r3, r2, [r1]
 8003f90:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1e5      	bne.n	8003f64 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e010      	b.n	8003fda <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	69da      	ldr	r2, [r3, #28]
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	bf0c      	ite	eq
 8003fc8:	2301      	moveq	r3, #1
 8003fca:	2300      	movne	r3, #0
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	461a      	mov	r2, r3
 8003fd0:	79fb      	ldrb	r3, [r7, #7]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	f43f af4a 	beq.w	8003e6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3770      	adds	r7, #112	; 0x70
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
	...

08003fe4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b097      	sub	sp, #92	; 0x5c
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	88fa      	ldrh	r2, [r7, #6]
 8003ffc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	88fa      	ldrh	r2, [r7, #6]
 8004004:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004016:	d10e      	bne.n	8004036 <UART_Start_Receive_IT+0x52>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d105      	bne.n	800402c <UART_Start_Receive_IT+0x48>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004026:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800402a:	e02d      	b.n	8004088 <UART_Start_Receive_IT+0xa4>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	22ff      	movs	r2, #255	; 0xff
 8004030:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004034:	e028      	b.n	8004088 <UART_Start_Receive_IT+0xa4>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10d      	bne.n	800405a <UART_Start_Receive_IT+0x76>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d104      	bne.n	8004050 <UART_Start_Receive_IT+0x6c>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	22ff      	movs	r2, #255	; 0xff
 800404a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800404e:	e01b      	b.n	8004088 <UART_Start_Receive_IT+0xa4>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	227f      	movs	r2, #127	; 0x7f
 8004054:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004058:	e016      	b.n	8004088 <UART_Start_Receive_IT+0xa4>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004062:	d10d      	bne.n	8004080 <UART_Start_Receive_IT+0x9c>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d104      	bne.n	8004076 <UART_Start_Receive_IT+0x92>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	227f      	movs	r2, #127	; 0x7f
 8004070:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004074:	e008      	b.n	8004088 <UART_Start_Receive_IT+0xa4>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	223f      	movs	r2, #63	; 0x3f
 800407a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800407e:	e003      	b.n	8004088 <UART_Start_Receive_IT+0xa4>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2222      	movs	r2, #34	; 0x22
 8004094:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	3308      	adds	r3, #8
 800409c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040a0:	e853 3f00 	ldrex	r3, [r3]
 80040a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a8:	f043 0301 	orr.w	r3, r3, #1
 80040ac:	657b      	str	r3, [r7, #84]	; 0x54
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	3308      	adds	r3, #8
 80040b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80040b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80040b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80040bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040be:	e841 2300 	strex	r3, r2, [r1]
 80040c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80040c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1e5      	bne.n	8004096 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }  
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d2:	d107      	bne.n	80040e4 <UART_Start_Receive_IT+0x100>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d103      	bne.n	80040e4 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	4a24      	ldr	r2, [pc, #144]	; (8004170 <UART_Start_Receive_IT+0x18c>)
 80040e0:	665a      	str	r2, [r3, #100]	; 0x64
 80040e2:	e002      	b.n	80040ea <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4a23      	ldr	r2, [pc, #140]	; (8004174 <UART_Start_Receive_IT+0x190>)
 80040e8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d019      	beq.n	800412e <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004102:	e853 3f00 	ldrex	r3, [r3]
 8004106:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800410e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	461a      	mov	r2, r3
 8004116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004118:	637b      	str	r3, [r7, #52]	; 0x34
 800411a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800411e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004120:	e841 2300 	strex	r3, r2, [r1]
 8004124:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1e6      	bne.n	80040fa <UART_Start_Receive_IT+0x116>
 800412c:	e018      	b.n	8004160 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	e853 3f00 	ldrex	r3, [r3]
 800413a:	613b      	str	r3, [r7, #16]
   return(result);
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	f043 0320 	orr.w	r3, r3, #32
 8004142:	653b      	str	r3, [r7, #80]	; 0x50
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	461a      	mov	r2, r3
 800414a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800414c:	623b      	str	r3, [r7, #32]
 800414e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004150:	69f9      	ldr	r1, [r7, #28]
 8004152:	6a3a      	ldr	r2, [r7, #32]
 8004154:	e841 2300 	strex	r3, r2, [r1]
 8004158:	61bb      	str	r3, [r7, #24]
   return(result);
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1e6      	bne.n	800412e <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	375c      	adds	r7, #92	; 0x5c
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	08004597 	.word	0x08004597
 8004174:	08004437 	.word	0x08004437

08004178 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004178:	b480      	push	{r7}
 800417a:	b095      	sub	sp, #84	; 0x54
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004188:	e853 3f00 	ldrex	r3, [r3]
 800418c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800418e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004190:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004194:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	461a      	mov	r2, r3
 800419c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800419e:	643b      	str	r3, [r7, #64]	; 0x40
 80041a0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80041a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041a6:	e841 2300 	strex	r3, r2, [r1]
 80041aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1e6      	bne.n	8004180 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	3308      	adds	r3, #8
 80041b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ba:	6a3b      	ldr	r3, [r7, #32]
 80041bc:	e853 3f00 	ldrex	r3, [r3]
 80041c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	f023 0301 	bic.w	r3, r3, #1
 80041c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	3308      	adds	r3, #8
 80041d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041da:	e841 2300 	strex	r3, r2, [r1]
 80041de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1e5      	bne.n	80041b2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d118      	bne.n	8004220 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	e853 3f00 	ldrex	r3, [r3]
 80041fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	f023 0310 	bic.w	r3, r3, #16
 8004202:	647b      	str	r3, [r7, #68]	; 0x44
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	461a      	mov	r2, r3
 800420a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800420c:	61bb      	str	r3, [r7, #24]
 800420e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004210:	6979      	ldr	r1, [r7, #20]
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	e841 2300 	strex	r3, r2, [r1]
 8004218:	613b      	str	r3, [r7, #16]
   return(result);
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1e6      	bne.n	80041ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2220      	movs	r2, #32
 8004224:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004232:	bf00      	nop
 8004234:	3754      	adds	r7, #84	; 0x54
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b084      	sub	sp, #16
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f7ff fa43 	bl	80036e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004262:	bf00      	nop
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800426a:	b480      	push	{r7}
 800426c:	b08f      	sub	sp, #60	; 0x3c
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004276:	2b21      	cmp	r3, #33	; 0x21
 8004278:	d14d      	bne.n	8004316 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004280:	b29b      	uxth	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d132      	bne.n	80042ec <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428c:	6a3b      	ldr	r3, [r7, #32]
 800428e:	e853 3f00 	ldrex	r3, [r3]
 8004292:	61fb      	str	r3, [r7, #28]
   return(result);
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800429a:	637b      	str	r3, [r7, #52]	; 0x34
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	461a      	mov	r2, r3
 80042a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042a6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042ac:	e841 2300 	strex	r3, r2, [r1]
 80042b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1e6      	bne.n	8004286 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	e853 3f00 	ldrex	r3, [r3]
 80042c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042cc:	633b      	str	r3, [r7, #48]	; 0x30
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	461a      	mov	r2, r3
 80042d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d6:	61bb      	str	r3, [r7, #24]
 80042d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042da:	6979      	ldr	r1, [r7, #20]
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	e841 2300 	strex	r3, r2, [r1]
 80042e2:	613b      	str	r3, [r7, #16]
   return(result);
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1e6      	bne.n	80042b8 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80042ea:	e014      	b.n	8004316 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042f0:	781a      	ldrb	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	b292      	uxth	r2, r2
 80042f8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042fe:	1c5a      	adds	r2, r3, #1
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800430a:	b29b      	uxth	r3, r3
 800430c:	3b01      	subs	r3, #1
 800430e:	b29a      	uxth	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004316:	bf00      	nop
 8004318:	373c      	adds	r7, #60	; 0x3c
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004322:	b480      	push	{r7}
 8004324:	b091      	sub	sp, #68	; 0x44
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800432e:	2b21      	cmp	r3, #33	; 0x21
 8004330:	d151      	bne.n	80043d6 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004338:	b29b      	uxth	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d132      	bne.n	80043a4 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004346:	e853 3f00 	ldrex	r3, [r3]
 800434a:	623b      	str	r3, [r7, #32]
   return(result);
 800434c:	6a3b      	ldr	r3, [r7, #32]
 800434e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004352:	63bb      	str	r3, [r7, #56]	; 0x38
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	461a      	mov	r2, r3
 800435a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800435c:	633b      	str	r3, [r7, #48]	; 0x30
 800435e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004360:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004362:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004364:	e841 2300 	strex	r3, r2, [r1]
 8004368:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800436a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1e6      	bne.n	800433e <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	e853 3f00 	ldrex	r3, [r3]
 800437c:	60fb      	str	r3, [r7, #12]
   return(result);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004384:	637b      	str	r3, [r7, #52]	; 0x34
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	461a      	mov	r2, r3
 800438c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800438e:	61fb      	str	r3, [r7, #28]
 8004390:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004392:	69b9      	ldr	r1, [r7, #24]
 8004394:	69fa      	ldr	r2, [r7, #28]
 8004396:	e841 2300 	strex	r3, r2, [r1]
 800439a:	617b      	str	r3, [r7, #20]
   return(result);
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1e6      	bne.n	8004370 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80043a2:	e018      	b.n	80043d6 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a8:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80043aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043ac:	881a      	ldrh	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043b6:	b292      	uxth	r2, r2
 80043b8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043be:	1c9a      	adds	r2, r3, #2
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	3b01      	subs	r3, #1
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80043d6:	bf00      	nop
 80043d8:	3744      	adds	r7, #68	; 0x44
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b088      	sub	sp, #32
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	e853 3f00 	ldrex	r3, [r3]
 80043f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043fe:	61fb      	str	r3, [r7, #28]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	461a      	mov	r2, r3
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	61bb      	str	r3, [r7, #24]
 800440a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440c:	6979      	ldr	r1, [r7, #20]
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	e841 2300 	strex	r3, r2, [r1]
 8004414:	613b      	str	r3, [r7, #16]
   return(result);
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1e6      	bne.n	80043ea <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2220      	movs	r2, #32
 8004420:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f7fc fc8d 	bl	8000d48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800442e:	bf00      	nop
 8004430:	3720      	adds	r7, #32
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b096      	sub	sp, #88	; 0x58
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004444:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800444c:	2b22      	cmp	r3, #34	; 0x22
 800444e:	f040 8094 	bne.w	800457a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004458:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800445c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004460:	b2d9      	uxtb	r1, r3
 8004462:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004466:	b2da      	uxtb	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446c:	400a      	ands	r2, r1
 800446e:	b2d2      	uxtb	r2, r2
 8004470:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004476:	1c5a      	adds	r2, r3, #1
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004482:	b29b      	uxth	r3, r3
 8004484:	3b01      	subs	r3, #1
 8004486:	b29a      	uxth	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004494:	b29b      	uxth	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d179      	bne.n	800458e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a2:	e853 3f00 	ldrex	r3, [r3]
 80044a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044ae:	653b      	str	r3, [r7, #80]	; 0x50
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	461a      	mov	r2, r3
 80044b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044b8:	647b      	str	r3, [r7, #68]	; 0x44
 80044ba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044c0:	e841 2300 	strex	r3, r2, [r1]
 80044c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1e6      	bne.n	800449a <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	3308      	adds	r3, #8
 80044d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d6:	e853 3f00 	ldrex	r3, [r3]
 80044da:	623b      	str	r3, [r7, #32]
   return(result);
 80044dc:	6a3b      	ldr	r3, [r7, #32]
 80044de:	f023 0301 	bic.w	r3, r3, #1
 80044e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	3308      	adds	r3, #8
 80044ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044ec:	633a      	str	r2, [r7, #48]	; 0x30
 80044ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044f4:	e841 2300 	strex	r3, r2, [r1]
 80044f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1e5      	bne.n	80044cc <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2220      	movs	r2, #32
 8004504:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004510:	2b01      	cmp	r3, #1
 8004512:	d12e      	bne.n	8004572 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	e853 3f00 	ldrex	r3, [r3]
 8004526:	60fb      	str	r3, [r7, #12]
   return(result);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f023 0310 	bic.w	r3, r3, #16
 800452e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	461a      	mov	r2, r3
 8004536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004538:	61fb      	str	r3, [r7, #28]
 800453a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453c:	69b9      	ldr	r1, [r7, #24]
 800453e:	69fa      	ldr	r2, [r7, #28]
 8004540:	e841 2300 	strex	r3, r2, [r1]
 8004544:	617b      	str	r3, [r7, #20]
   return(result);
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1e6      	bne.n	800451a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	69db      	ldr	r3, [r3, #28]
 8004552:	f003 0310 	and.w	r3, r3, #16
 8004556:	2b10      	cmp	r3, #16
 8004558:	d103      	bne.n	8004562 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2210      	movs	r2, #16
 8004560:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004568:	4619      	mov	r1, r3
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7ff f8c6 	bl	80036fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004570:	e00d      	b.n	800458e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7fc fbc8 	bl	8000d08 <HAL_UART_RxCpltCallback>
}
 8004578:	e009      	b.n	800458e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	8b1b      	ldrh	r3, [r3, #24]
 8004580:	b29a      	uxth	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f042 0208 	orr.w	r2, r2, #8
 800458a:	b292      	uxth	r2, r2
 800458c:	831a      	strh	r2, [r3, #24]
}
 800458e:	bf00      	nop
 8004590:	3758      	adds	r7, #88	; 0x58
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004596:	b580      	push	{r7, lr}
 8004598:	b096      	sub	sp, #88	; 0x58
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80045a4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045ac:	2b22      	cmp	r3, #34	; 0x22
 80045ae:	f040 8094 	bne.w	80046da <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80045b8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80045c2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80045c6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80045ca:	4013      	ands	r3, r2
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045d0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d6:	1c9a      	adds	r2, r3, #2
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	3b01      	subs	r3, #1
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d179      	bne.n	80046ee <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004602:	e853 3f00 	ldrex	r3, [r3]
 8004606:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800460e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	461a      	mov	r2, r3
 8004616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004618:	643b      	str	r3, [r7, #64]	; 0x40
 800461a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800461e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004620:	e841 2300 	strex	r3, r2, [r1]
 8004624:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1e6      	bne.n	80045fa <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	3308      	adds	r3, #8
 8004632:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	e853 3f00 	ldrex	r3, [r3]
 800463a:	61fb      	str	r3, [r7, #28]
   return(result);
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	f023 0301 	bic.w	r3, r3, #1
 8004642:	64bb      	str	r3, [r7, #72]	; 0x48
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	3308      	adds	r3, #8
 800464a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800464c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800464e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004650:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004652:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004654:	e841 2300 	strex	r3, r2, [r1]
 8004658:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1e5      	bne.n	800462c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2220      	movs	r2, #32
 8004664:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004670:	2b01      	cmp	r3, #1
 8004672:	d12e      	bne.n	80046d2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	e853 3f00 	ldrex	r3, [r3]
 8004686:	60bb      	str	r3, [r7, #8]
   return(result);
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	f023 0310 	bic.w	r3, r3, #16
 800468e:	647b      	str	r3, [r7, #68]	; 0x44
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	461a      	mov	r2, r3
 8004696:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004698:	61bb      	str	r3, [r7, #24]
 800469a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469c:	6979      	ldr	r1, [r7, #20]
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	e841 2300 	strex	r3, r2, [r1]
 80046a4:	613b      	str	r3, [r7, #16]
   return(result);
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1e6      	bne.n	800467a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	f003 0310 	and.w	r3, r3, #16
 80046b6:	2b10      	cmp	r3, #16
 80046b8:	d103      	bne.n	80046c2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2210      	movs	r2, #16
 80046c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80046c8:	4619      	mov	r1, r3
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7ff f816 	bl	80036fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80046d0:	e00d      	b.n	80046ee <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7fc fb18 	bl	8000d08 <HAL_UART_RxCpltCallback>
}
 80046d8:	e009      	b.n	80046ee <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	8b1b      	ldrh	r3, [r3, #24]
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f042 0208 	orr.w	r2, r2, #8
 80046ea:	b292      	uxth	r2, r2
 80046ec:	831a      	strh	r2, [r3, #24]
}
 80046ee:	bf00      	nop
 80046f0:	3758      	adds	r7, #88	; 0x58
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b083      	sub	sp, #12
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80046fe:	bf00      	nop
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
	...

0800470c <__libc_init_array>:
 800470c:	b570      	push	{r4, r5, r6, lr}
 800470e:	4d0d      	ldr	r5, [pc, #52]	; (8004744 <__libc_init_array+0x38>)
 8004710:	4c0d      	ldr	r4, [pc, #52]	; (8004748 <__libc_init_array+0x3c>)
 8004712:	1b64      	subs	r4, r4, r5
 8004714:	10a4      	asrs	r4, r4, #2
 8004716:	2600      	movs	r6, #0
 8004718:	42a6      	cmp	r6, r4
 800471a:	d109      	bne.n	8004730 <__libc_init_array+0x24>
 800471c:	4d0b      	ldr	r5, [pc, #44]	; (800474c <__libc_init_array+0x40>)
 800471e:	4c0c      	ldr	r4, [pc, #48]	; (8004750 <__libc_init_array+0x44>)
 8004720:	f000 f820 	bl	8004764 <_init>
 8004724:	1b64      	subs	r4, r4, r5
 8004726:	10a4      	asrs	r4, r4, #2
 8004728:	2600      	movs	r6, #0
 800472a:	42a6      	cmp	r6, r4
 800472c:	d105      	bne.n	800473a <__libc_init_array+0x2e>
 800472e:	bd70      	pop	{r4, r5, r6, pc}
 8004730:	f855 3b04 	ldr.w	r3, [r5], #4
 8004734:	4798      	blx	r3
 8004736:	3601      	adds	r6, #1
 8004738:	e7ee      	b.n	8004718 <__libc_init_array+0xc>
 800473a:	f855 3b04 	ldr.w	r3, [r5], #4
 800473e:	4798      	blx	r3
 8004740:	3601      	adds	r6, #1
 8004742:	e7f2      	b.n	800472a <__libc_init_array+0x1e>
 8004744:	080047cc 	.word	0x080047cc
 8004748:	080047cc 	.word	0x080047cc
 800474c:	080047cc 	.word	0x080047cc
 8004750:	080047d0 	.word	0x080047d0

08004754 <memset>:
 8004754:	4402      	add	r2, r0
 8004756:	4603      	mov	r3, r0
 8004758:	4293      	cmp	r3, r2
 800475a:	d100      	bne.n	800475e <memset+0xa>
 800475c:	4770      	bx	lr
 800475e:	f803 1b01 	strb.w	r1, [r3], #1
 8004762:	e7f9      	b.n	8004758 <memset+0x4>

08004764 <_init>:
 8004764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004766:	bf00      	nop
 8004768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800476a:	bc08      	pop	{r3}
 800476c:	469e      	mov	lr, r3
 800476e:	4770      	bx	lr

08004770 <_fini>:
 8004770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004772:	bf00      	nop
 8004774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004776:	bc08      	pop	{r3}
 8004778:	469e      	mov	lr, r3
 800477a:	4770      	bx	lr
